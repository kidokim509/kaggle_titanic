{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fashion MNIST 실습 소개\n",
    "## 목표\n",
    "의류 이미지를 보고 어떤 종류의 의류인지 분류하는 분류기의 성능을 높여주세요\n",
    "\n",
    "## 방법\n",
    "Part #1에서 학습한 모든 기법과 내용을 Tensorflow로 실습해볼 수 있는 코드입니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 데이터셋 소개\n",
    "## Fasion MNIST\n",
    "https://github.com/zalandoresearch/fashion-mnist\n",
    "\n",
    "## Why not MNIST?\n",
    "1. MNIST is too easy.  \n",
    "Convolutional nets can achieve 99.7% on MNIST easily, and similarly, even classic ML algorithms can achieve 97%.\n",
    "2. MNIST is overused.  \n",
    "Almost everyone who has experience with deep learning has come across MNIST at least once.\n",
    "3. MNIST cannot represent modern CV tasks.  \n",
    "This was noted by François Chollet, the author of the Keras library.\n",
    "\n",
    "## Overview\n",
    "* The Fashion MNIST training set contains 55,000 examples, \n",
    "* and the test set contains 10,000 examples.\n",
    "* Each example is a 28x28 grayscale image (just like the images in the original MNIST), \n",
    "* associated with a label from 10 classes\n",
    "\n",
    "### Labels\n",
    "Each training and test example is assigned to one of the following labels:\n",
    "\n",
    "| Label | Description |\n",
    "| --- | --- |\n",
    "| 0 | T-shirt/top (티셔츠/탑) |\n",
    "| 1 | Trouser (바지) |\n",
    "| 2 | Pullover (스웨터) |\n",
    "| 3 | Dress (드레스) |\n",
    "| 4 | Coat (코트) |\n",
    "| 5 | Sandal (샌달) |\n",
    "| 6 | Shirt (셔츠) |\n",
    "| 7 | Sneaker (신발-스니커즈) |\n",
    "| 8 | Bag (가방) |\n",
    "| 9 | Ankle boot (짧은 부츠) |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/olaf/anaconda3/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n",
      "  from ._conv import register_converters as _register_converters\n"
     ]
    }
   ],
   "source": [
    "# 파이선 행렬 연산에 주로 사용하는 라이브러리\n",
    "import numpy as np\n",
    "# 파이선에서 챠트 그리기에 주로 사용하는 라이브러리\n",
    "import matplotlib.pyplot as plt\n",
    "# 텐서플로우! 예~!\n",
    "import tensorflow as tf\n",
    "# 텐서플로우의 MNIST 데이터 Load Helper\n",
    "from tensorflow.examples.tutorials.mnist import input_data\n",
    "\n",
    "# matplotlib의 챠트 이미지가 ipython notebook에서 출력되도록 하는 옵션\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From <ipython-input-2-0c7515fb0b2d>:5: read_data_sets (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n",
      "WARNING:tensorflow:From /Users/olaf/anaconda3/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:260: maybe_download (from tensorflow.contrib.learn.python.learn.datasets.base) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please write your own downloading logic.\n",
      "WARNING:tensorflow:From /Users/olaf/anaconda3/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:262: extract_images (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use tf.data to implement this functionality.\n",
      "Extracting fashion-data/train-images-idx3-ubyte.gz\n",
      "WARNING:tensorflow:From /Users/olaf/anaconda3/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:267: extract_labels (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use tf.data to implement this functionality.\n",
      "Extracting fashion-data/train-labels-idx1-ubyte.gz\n",
      "WARNING:tensorflow:From /Users/olaf/anaconda3/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:110: dense_to_one_hot (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use tf.one_hot on tensors.\n",
      "Extracting fashion-data/t10k-images-idx3-ubyte.gz\n",
      "Extracting fashion-data/t10k-labels-idx1-ubyte.gz\n",
      "WARNING:tensorflow:From /Users/olaf/anaconda3/lib/python3.6/site-packages/tensorflow/contrib/learn/python/learn/datasets/mnist.py:290: DataSet.__init__ (from tensorflow.contrib.learn.python.learn.datasets.mnist) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use alternatives such as official/mnist/dataset.py from tensorflow/models.\n",
      "Train: 55000, Validation: 5000, Test: 10000\n",
      "\n",
      "Image Vector[0] is [0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.00392157 0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.17254902 0.49803925 0.7137255\n",
      " 0.7254902  0.6313726  0.47058827 0.21568629 0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.16470589\n",
      " 0.77647066 0.9843138  1.         0.9843138  0.97647065 0.9686275\n",
      " 1.         0.98823535 0.83921576 0.3921569  0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.00784314 0.         0.         0.91372555 0.98823535 0.9294118\n",
      " 0.93725497 0.9176471  0.9294118  0.9215687  0.9294118  0.9294118\n",
      " 0.9960785  0.89019614 0.         0.         0.         0.\n",
      " 0.00392157 0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.00784314 0.         0.\n",
      " 0.0627451  0.8235295  0.882353   0.8431373  0.6862745  0.85098046\n",
      " 0.8470589  0.7568628  0.7686275  0.8862746  0.86666673 0.8196079\n",
      " 0.19607845 0.         0.         0.00784314 0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.00784314 0.         0.         0.7803922  0.8980393  0.909804\n",
      " 0.90196085 0.9607844  0.8000001  0.8588236  0.9921569  0.9607844\n",
      " 0.8117648  0.7607844  0.8745099  0.9058824  0.92549026 0.9215687\n",
      " 0.         0.         0.01176471 0.         0.         0.\n",
      " 0.         0.         0.         0.         0.00392157 0.\n",
      " 0.5372549  0.9215687  0.8000001  0.8196079  0.78823537 0.8196079\n",
      " 0.9176471  0.74509805 0.9176471  0.854902   0.8431373  0.9333334\n",
      " 0.93725497 0.8000001  0.7411765  0.87843144 0.6039216  0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.7607844  0.78823537\n",
      " 0.7843138  0.8196079  0.79215693 0.7568628  0.80392164 0.7607844\n",
      " 0.7176471  0.854902   0.9058824  0.7725491  0.6745098  0.70980394\n",
      " 0.7568628  0.80392164 0.7803922  0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.01176471 0.8313726  0.7960785  0.7372549  0.7411765\n",
      " 0.7686275  0.77647066 0.77647066 0.78823537 0.7686275  0.85098046\n",
      " 0.7019608  0.654902   0.7176471  0.85098046 0.7725491  0.79215693\n",
      " 0.8588236  0.11764707 0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.13333334\n",
      " 0.882353   0.7843138  0.7607844  0.74509805 0.7372549  0.75294125\n",
      " 0.7686275  0.75294125 0.6666667  0.79215693 0.74509805 0.78823537\n",
      " 0.76470596 0.7843138  0.78823537 0.8196079  0.89019614 0.19607845\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.26666668 0.882353   0.8235295\n",
      " 0.82745105 0.77647066 0.75294125 0.7686275  0.8000001  0.7686275\n",
      " 0.70980394 0.8313726  0.7725491  0.76470596 0.75294125 0.8078432\n",
      " 0.86274517 0.8235295  0.8980393  0.3647059  0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.43529415 0.8745099  0.89019614 0.9921569  0.8196079\n",
      " 0.7686275  0.8000001  0.82745105 0.8078432  0.7176471  0.8470589\n",
      " 0.8078432  0.8235295  0.7960785  0.8431373  0.9568628  0.87843144\n",
      " 0.89019614 0.5882353  0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.54509807\n",
      " 0.882353   0.87843144 1.         0.79215693 0.8078432  0.8313726\n",
      " 0.8196079  0.82745105 0.74509805 0.8352942  0.79215693 0.8117648\n",
      " 0.8078432  0.8705883  1.         0.90196085 0.86274517 0.74509805\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.7058824  0.8862746  0.87843144\n",
      " 1.         0.7803922  0.8000001  0.8117648  0.83921576 0.83921576\n",
      " 0.74509805 0.8470589  0.8078432  0.7960785  0.80392164 0.8588236\n",
      " 0.95294124 0.87843144 0.83921576 0.9176471  0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.882353   0.8745099  0.8941177  0.9960785  0.8196079\n",
      " 0.8078432  0.81568635 0.8352942  0.8235295  0.7490196  0.8431373\n",
      " 0.8117648  0.8000001  0.81568635 0.82745105 0.97647065 0.8862746\n",
      " 0.83921576 1.         0.14901961 0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.9803922\n",
      " 0.909804   0.94117653 0.93725497 0.82745105 0.7960785  0.8196079\n",
      " 0.80392164 0.82745105 0.7725491  0.8431373  0.81568635 0.81568635\n",
      " 0.83921576 0.8352942  0.93725497 0.9058824  0.8588236  1.\n",
      " 0.31764707 0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.9725491  0.92549026 0.9686275\n",
      " 0.94117653 0.7960785  0.7843138  0.81568635 0.8078432  0.83921576\n",
      " 0.7568628  0.8352942  0.8313726  0.81568635 0.8313726  0.82745105\n",
      " 0.95294124 0.9490197  0.882353   0.9960785  0.25882354 0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.9686275  0.90196085 0.98823535 0.8862746  0.7803922\n",
      " 0.82745105 0.79215693 0.82745105 0.8352942  0.7137255  0.8352942\n",
      " 0.8313726  0.8078432  0.79215693 0.8588236  0.8117648  0.9686275\n",
      " 0.8705883  0.9294118  0.40784317 0.         0.         0.\n",
      " 0.         0.         0.         0.         0.03921569 0.9568628\n",
      " 0.8588236  0.9803922  0.80392164 0.7803922  0.8196079  0.79215693\n",
      " 0.8196079  0.82745105 0.7411765  0.83921576 0.8078432  0.8235295\n",
      " 0.7843138  0.8313726  0.6039216  0.94117653 0.81568635 0.8588236\n",
      " 0.54901963 0.         0.         0.         0.         0.\n",
      " 0.         0.         0.08235294 1.         0.8705883  0.9333334\n",
      " 0.72156864 0.8235295  0.75294125 0.8078432  0.8196079  0.8235295\n",
      " 0.7411765  0.8352942  0.82745105 0.8196079  0.75294125 0.8941177\n",
      " 0.60784316 0.8862746  0.9333334  0.9450981  0.6509804  0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.14509805 0.9607844  0.8862746  0.9450981  0.5882353  0.7725491\n",
      " 0.7411765  0.8000001  0.8196079  0.8235295  0.7176471  0.8352942\n",
      " 0.8352942  0.78823537 0.72156864 0.8431373  0.57254905 0.8470589\n",
      " 0.92549026 0.882353   0.6039216  0.         0.         0.\n",
      " 0.         0.         0.         0.         0.227451   0.93725497\n",
      " 0.89019614 1.         0.61960787 0.7568628  0.76470596 0.8000001\n",
      " 0.8196079  0.8352942  0.7058824  0.8117648  0.85098046 0.7803922\n",
      " 0.7607844  0.82745105 0.61960787 0.8588236  0.92549026 0.8470589\n",
      " 0.5921569  0.         0.         0.         0.         0.\n",
      " 0.         0.         0.26666668 0.91372555 0.8862746  0.95294124\n",
      " 0.54509807 0.7843138  0.7568628  0.80392164 0.8235295  0.81568635\n",
      " 0.7058824  0.80392164 0.8313726  0.7960785  0.7686275  0.8470589\n",
      " 0.6156863  0.7019608  1.         0.8470589  0.60784316 0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.31764707 0.882353   0.87843144 0.82745105 0.5411765  0.8588236\n",
      " 0.7254902  0.78823537 0.8352942  0.8117648  0.7725491  0.8862746\n",
      " 0.8313726  0.7843138  0.74509805 0.8431373  0.7176471  0.3529412\n",
      " 1.         0.82745105 0.5764706  0.         0.         0.\n",
      " 0.         0.         0.         0.         0.35686275 0.8235295\n",
      " 0.90196085 0.61960787 0.44705886 0.80392164 0.73333335 0.81568635\n",
      " 0.8196079  0.8078432  0.7568628  0.8235295  0.82745105 0.8000001\n",
      " 0.76470596 0.8000001  0.70980394 0.09019608 1.         0.8352942\n",
      " 0.61960787 0.         0.         0.         0.         0.\n",
      " 0.         0.         0.34117648 0.80392164 0.909804   0.427451\n",
      " 0.6431373  1.         0.83921576 0.87843144 0.8705883  0.8235295\n",
      " 0.7725491  0.83921576 0.882353   0.8705883  0.82745105 0.86274517\n",
      " 0.85098046 0.         0.9176471  0.8470589  0.6627451  0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.36078432 0.8352942  0.909804   0.57254905 0.01960784 0.5254902\n",
      " 0.5921569  0.63529414 0.6666667  0.7176471  0.7137255  0.6431373\n",
      " 0.6509804  0.69803923 0.63529414 0.6117647  0.38431376 0.\n",
      " 0.94117653 0.882353   0.8235295  0.         0.         0.\n",
      " 0.         0.         0.         0.         0.16862746 0.6431373\n",
      " 0.8078432  0.5529412  0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.         0.\n",
      " 0.         0.         0.         0.         0.49803925 0.4901961\n",
      " 0.29803923 0.         0.         0.        ]\n",
      "\n",
      "Label[0] is [0. 0. 0. 0. 1. 0. 0. 0. 0. 0.]\n"
     ]
    }
   ],
   "source": [
    "# Fashion MNIST 이미지 데이터를 로드합니다. \n",
    "# ㄴ 이미지 파일은 fashion-data 폴더에 받아놓았습니다. \n",
    "# ㄴ input_data Helper는 이 이미지를 fashion_mnist 객체에 로드합니다.\n",
    "# ㄴ one_hot=True는 라벨 데이터의 형식을 의미합니다.\n",
    "fashion_mnist = input_data.read_data_sets('fashion-data', one_hot=True)\n",
    "\n",
    "# fashion_mnist는 Datasets라는 이름의 named tuple입니다.\n",
    "# 이 안에는 'train', 'validation', 'test' 데이터셋이 나뉘어져 있어요.\n",
    "# https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/learn/python/learn/datasets/base.py\n",
    "# https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/learn/python/learn/datasets/mnist.py\n",
    "\n",
    "# 데이터셋 개수\n",
    "print('Train: {}, Validation: {}, Test: {}'.format(\n",
    "    fashion_mnist.train.num_examples,\n",
    "    fashion_mnist.validation.num_examples,\n",
    "    fashion_mnist.test.num_examples))\n",
    "print('')\n",
    "\n",
    "# 이미지 샘플 보기 (raw)\n",
    "# ㄴ 784 길이의 벡터\n",
    "print('Image Vector[0] is {}'.format(fashion_mnist.train._images[0]))\n",
    "print('')\n",
    "\n",
    "# 이미지 라벨(정답) 보기 (raw)\n",
    "# ㄴ one_hot encoding된 라벨 데이터\n",
    "print('Label[0] is {}'.format(fashion_mnist.train._labels[0])) # 4번 즉, 정답은 '코트'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 25 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 이미지 샘플 보기 (진짜 그림으로 보기)\n",
    "\n",
    "label_dict = {\n",
    " 0: 'T-shirt/top',\n",
    " 1: 'Trouser',\n",
    " 2: 'Pullover',\n",
    " 3: 'Dress',\n",
    " 4: 'Coat',\n",
    " 5: 'Sandal',\n",
    " 6: 'Shirt',\n",
    " 7: 'Sneaker',\n",
    " 8: 'Bag',\n",
    " 9: 'Ankle boot'\n",
    "}\n",
    "\n",
    "row = 5\n",
    "col = 5\n",
    "fig=plt.figure(figsize=(row, col))\n",
    "\n",
    "for i in range(row*col):\n",
    "    image = fashion_mnist.train.images[i].reshape(28,28)\n",
    "    label = np.argmax(fashion_mnist.train.labels[i])\n",
    "    \n",
    "    sbp = fig.add_subplot(row, col, i+1)\n",
    "    sbp.set_title(label_dict[label])\n",
    "    sbp.set_xticks([])\n",
    "    sbp.set_yticks([])\n",
    "    plt.imshow(image, cmap='Greys')\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tensorflow로 코드 짜기\n",
    "## 텐서(Tensor)란?\n",
    "https://www.tensorflow.org/programmers_guide/tensors\n",
    "\n",
    "* Tensor: A tensor is a generalization of vectors and matrices to potentially higher dimensions.\n",
    "* Rank: Tensor의 차원 수  \n",
    "0: Scalar (magnitude only)  \n",
    "1: Vector (magnitude and direction)  \n",
    "2: Matrix (table of numbers)  \n",
    "3: 3-Tensor (cube of numbers)  \n",
    "n: n-Tensor (you get the idea)  \n",
    "* Shape: Tensor의 사이즈  \n",
    "Higher-rank Tensors, similarly, consist of an n-dimensional array. For example, during image processing, many tensors of rank 4 are used, with dimensions corresponding to example-in-batch, image width, image height, and color channel.\n",
    "\n",
    "## Tensorflow 코드의 대강의 흐름\n",
    "\n",
    "1. 입력 X로부터 Hidden Layer를 거쳐 Output Y^가 나오는 인공 신경망 그림을 머릿속에 그려봅니다.\n",
    "2. Tensorflow는 코드는 \n",
    "  * 네트워크의 생김새와 연산을 정의하는 부분과\n",
    "  * 정의한 네트워크에 데이터를 feeding하여 실제로 연산을 수행하는 2단계로 크게 나눌 수 있습니다.\n",
    "3. 네트워크의 생김새와 연산을 정의해봅시다.\n",
    "  * 입력 X (의류 이미지 784 픽셀 벡터)가 들어갈 자리와 정답 라벨 Y가 들어갈 자리를 만들어 줍니다.\n",
    "    * tf.placeholder\n",
    "      * plcaeholder로 선언한 값들은, 나중에 실제 학습을 할 때 내가 'feed' 혹은 '주입' 시켜주는 값입니다.\n",
    "  * 히든 레이어에 필요한 Weight, Bias를 정의합니다.  \n",
    "    각 변수의 Shape를 잘 맞추어야 합니다. (행렬 연산이 가능하도록)\n",
    "    * tf.Variable\n",
    "      * tf.Variable(텐서 초기 값)\n",
    "      * tf.Variable(텐서 초기 값, name='변수명')\n",
    "    * tf.get_variable\n",
    "      * tf.get_variable(\"변수명\", initializer=텐서 초기 값 or 초기화 함수)\n",
    "  * 히든 레이어의 연산을 정의합니다.\n",
    "    * 결과 = Activation(이전_레이어_결과 * Weight + Bias)\n",
    "      * tf.matmul\n",
    "      * tf.add\n",
    "      * tf.nn.relu 등 tf.nn에 있는 activation 함수들 사용\n",
    "  * Error 연산을 정의합니다.\n",
    "    * error = ...\n",
    "      * tf.nn.softmax_cross_entropy_with_logits_v2\n",
    "        * Output Tensor를 입력 받아 Error 값을 Tensor로 출력\n",
    "    * 또는 tf.수학_함수들 사용하여 직접 계산\n",
    "  * Optimizer 연산을 정의합니다.\n",
    "    * optimizer = ...\n",
    "      * tf.train.GradientDescentOptimizer\n",
    "      * tf.train.AdamOptimizer 등\n",
    "  * Accuracy나 추가로 계산하고 싶은 연산이 있다면 추가 정의\n",
    "    * accuracy = ...\n",
    "4. 정의한 네트워크에 데이터를 feeding하여 실제로 연산을 수행하는 단계입니다.\n",
    "  * Tensorflow의 Global 변수 초기화\n",
    "    * tf.global_variables_initializer()\n",
    "  * Tensorflow 세션 생성: 학습을 위한 세션. 세션 안에서 학습한 Weight들이 공유된다.\n",
    "    * tf.Session()\n",
    "  * 전체 batch에서 mini-batch만큼 학습 데이터셋을 가져와서 학습(Optimizer 연산) 수행\n",
    "    * sess.run(optimizer, feed_dict={X: 학습셋, Y: 정답셋}\n",
    "      * feed_dict에 넣어준 값이 앞서 정의한 Placeholder에 들어가게 됨\n",
    "  * 앞 과정을 Epoch 만큼 반복\n",
    "    * 한 Epoch이 끝날 때 마다 Validation 데이터셋을 가지고 Error, Accuracy 측정\n",
    "      * sess.run([error, accuracy], feed_dict={X: Validation_셋, Y: Validaiton_정답셋}\n",
    "      \n",
    "      \n",
    "덧)  \n",
    "예제 코드를 보다보면 tf.name_scope, tf.variable_scope 같은 것이 많이 나옵니다.  \n",
    "일단 이 아이들은 tensor board에 신경망 구조(graph)를 도식화 할때 변수와 연산명을 grouping 할 때 쓴다고만 알고 넘어가겠습니다.  \n",
    "variable_scope 같은 경우는 Variable Sharing의 목적이 있는데,  \n",
    "이건 다음 번에 실습 코드를 def나 class 단위로 추상화 하면서 설명 드리도록 하겠습니다."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## NN 모델 만들기\n",
    "인공 신경망의 layer 수, layer 당 unit 수, activation 함수, optimizer 선택, learning rate 변경, 가중치(weight) 초기화나 과적합(overfitting) 회피 기법들을 다양하게 사용해보세요.\n",
    "아래는 지금 예제의 상태입니다.\n",
    "\n",
    "* Input Layer     : 784 Neurons\n",
    "* Hidden Layer #1 : 128 Neurons (W: 정규분포 평균 0 & 표준편차 0.01, B: 0, Activation: ReLU)\n",
    "* Hidden Layer #2 : 128 Neurons (W: 정규분포 평균 0 & 표준편차 0.01, B: 0, Activation: ReLU)\n",
    "* Output Layer    : 10 Neurons (W: 정규분포 평균 0 & 표준편차 0.01, B: 0, Activation: Softmax)\n",
    "\n",
    "## 학습 효율 (학습 속도, Overfitting 회피 등)을 높이기 위한 기법들 (1)\n",
    "#### Layer 및 Layer 당 Neuron 개수 조정\n",
    "#### Initializer\n",
    "```python\n",
    "# Xavier\n",
    "W1 = tf.get_variable(\"W1\",\n",
    "                     shape=[784, 128],\n",
    "                     dtype=tf.float32,\n",
    "                     initializer=tf.contrib.layers.xavier_initializer())\n",
    "\n",
    "# 정규 분포\n",
    "W1 = tf.get_variable(\"W1\",\n",
    "                     shape=[784, 128],\n",
    "                     dtype=tf.float32,\n",
    "                     initializer=tf.tf.random_normal_initializer(mean=0.0, stddev=1.0))\n",
    "\n",
    "# 내가 직접 초기 값 전달\n",
    "B1 = tf.get_variable(\"B1\", initializer=tf.zeros([128]))\n",
    "\n",
    "# tf.Variable을 그냥 쓰고 싶다면...\n",
    "initializer = tf.contrib.layers.xavier_initializer()\n",
    "W1 = tf.Variable(initializer(shape=[784, 128], dtype=tf.float32), name='W1')\n",
    "```\n",
    "\n",
    "#### Drop Out\n",
    "원하는 레이어마다 추가\n",
    "```python\n",
    "is_training = tf.placeholder(tf.bool)\n",
    "keep_prob = tf.placeholder(tf.float32)\n",
    "\n",
    "H2 = tf.nn.relu(tf.add(tf.matmul(H1, W2), B2))\n",
    "H2 = tf.where(is_training,\n",
    "              tf.nn.dropout(H2, keep_prob), # keep_prob = 뉴런 사용률\n",
    "              H2) \n",
    "```\n",
    "\n",
    "덧) tf.where(condition, x, y)는 condition이 True이면 x를 실행, False이면 y를 실행하여 그 실행 결과 Tensor를 리턴\n",
    "\n",
    "#### Batch Normalization\n",
    "원하는 레이어마다 추가\n",
    "```python\n",
    "H1 = tf.layers.batch_normalization(H1, training=is_training)\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# >>>>>>>>>> LAYERS (Weight, Bias, Activation)\n",
    "\n",
    "# INPUT LAYER\n",
    "# : MNIST 이미지는 28*28 = 784개의 feature \n",
    "# mini-batch 1회당 N개의 이미지(row) * 784 벡터(column)를 처리할 것이기 때문에 shape = [None, 784]\n",
    "X = tf.placeholder(tf.float32, [None, 784], name='X')\n",
    "\n",
    "# 결과 값\n",
    "# : 0~9 10가지 분류로 만듬\n",
    "# mini-batch 1회당 N개의 이미지(row) * 10 벡터(column)를 처리할 것이기 때문에 shape = [None, 10]\n",
    "Y = tf.placeholder(tf.float32, [None, 10], name='Y')\n",
    "\n",
    "# 기타 학습 시 feed할 설정 값\n",
    "# drop out시 weight 사용률\n",
    "keep_prob = tf.placeholder(tf.float32, name='keep_prob')\n",
    "\n",
    "# 학습/예측 여부\n",
    "is_training = tf.placeholder(tf.bool, name='is_training')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Hidden Layers\n",
    "# 주의!: tf.get_variable은 같은 변수명이 없으면 생성, 있으면 실패합니다. 이미 만든 변수를 덮어쓰지 않음.\n",
    "# 원래 사용 목적이 기존에 만든 변수 가져오기: tf.get_variable(\"W1\") 이렇게만 하면 기존에 만든 변수를 가져오는 것.\n",
    "# 그래서 개발중에 이 셀을 반복해서 실행하면 'Variable layer1/W1 already exists'라고 에러가 납니다.\n",
    "# 번거롭지만 kerner restart 해주셔야 해요. \n",
    "# 아니면 그냥 무조건 새로 정의하는 tf.Variable을 쓰셔도 됩니다.\n",
    "with tf.variable_scope('layer1'):\n",
    "    W1 = tf.get_variable(\"W1\",\n",
    "                     shape=[784, 128],\n",
    "                     dtype=tf.float32,\n",
    "                     initializer=tf.random_normal_initializer(mean=0.0, stddev=0.01))\n",
    "    B1 = tf.get_variable(\"B1\", initializer=tf.zeros([128]))\n",
    "    H1 = tf.nn.relu(tf.add(tf.matmul(X, W1), B1))\n",
    "    tf.summary.histogram('W1', W1)\n",
    "\n",
    "with tf.variable_scope('layer2'):\n",
    "    W2 = tf.get_variable(\"W2\",\n",
    "                     shape=[128, 128],\n",
    "                     dtype=tf.float32,\n",
    "                     initializer=tf.random_normal_initializer(mean=0.0, stddev=0.01))\n",
    "    B2 = tf.get_variable(\"B2\", initializer=tf.zeros([128]))\n",
    "    H2 = tf.nn.relu(tf.add(tf.matmul(H1, W2), B2))\n",
    "    tf.summary.histogram('W2', W2)\n",
    "    \n",
    "# Output Layer\n",
    "with tf.variable_scope('output'):\n",
    "    W3 = tf.get_variable(\"W3\", \n",
    "                     shape=[128, 10], \n",
    "                     dtype=tf.float32,\n",
    "                     initializer=tf.random_normal_initializer(mean=0.0, stddev=0.01))\n",
    "    B3 = tf.get_variable(\"B3\", initializer=tf.zeros([10]))\n",
    "    prediction = tf.add(tf.matmul(H2, W3), B3)\n",
    "    tf.summary.histogram('W3', W3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Error Funciton\n",
    "## 학습 효율을 높이기 위한 기법들 (2)\n",
    "#### L2 Regularization\n",
    "```python\n",
    "# cross entropy with logits\n",
    "error = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits = prediction, labels = Y))\n",
    "\n",
    "# l2 regularization\n",
    "vars = tf.trainable_variables() # 정의된 모든 weight들\n",
    "beta = 0.001\n",
    "l2_loss = tf.add_n([ tf.nn.l2_loss(v) for v in vars ]) * beta\n",
    "\n",
    "## cross entropy + l2 regularization\n",
    "error = error + l2_loss\n",
    "```\n",
    "\n",
    "덧) tf.add와 tf.add_n의 차이.  \n",
    "* tf.add(x, y): 입력 받은 두 텐서, x와 y 텐서를 element-wise하게 합.  \n",
    "* tf.add_n(list_of_tensors): 텐서 리스트를 입력받아, 리스트 안의 텐서 N개를 element-wise하게 합."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# >>>>>>>>>> ERROR(COST, LOSS) FUNCTION: Cross Entropy, MSE, ...\n",
    "# https://www.tensorflow.org/versions/r1.8/api_docs/python/tf/nn/softmax_cross_entropy_with_logits_v2\n",
    "\n",
    "with tf.name_scope('error'):\n",
    "    # cross entropy with logits\n",
    "    # 학습 하다가 error가 NaN이 되는 이슈 -> 해결방법: cross entropy 직접 계산하지 말 것\n",
    "    # ㄴ https://github.com/tensorflow/tensorflow/issues/2462#issuecomment-220842098\n",
    "    error = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits = prediction, labels = Y))\n",
    "\n",
    "    # TensorBoard에 기록할 수치 등록 \n",
    "    tf.summary.scalar('error', error)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimizer - 학습 알고리즘\n",
    "\n",
    "## 학습 효율을 높이기 위한 기법들 (3)\n",
    "\n",
    "#### Learning Rate 조정\n",
    "learning_rate = ...\n",
    "\n",
    "#### 학습 알고리즘 선택 (SGD, Adam, RMSProp, ...)\n",
    "optimizer = ..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# >>>>>>>>>> OPTIMIZER (by Backpropagation & Gradient Descent & ...)\n",
    "\n",
    "with tf.name_scope('optimizer'):\n",
    "    learning_rate = 0.001\n",
    "    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(error)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# >>>>>>>>>> ACCURACY 계산\n",
    "\n",
    "with tf.name_scope('accuracy'):\n",
    "    # 예측 결과 텐서 prediction 과 정답 라벨 텐서를 비교하여\n",
    "    is_correct = tf.equal(tf.argmax(prediction, 1), tf.argmax(Y, 1))\n",
    "    # 일치하는 것의 비율 계산\n",
    "    accuracy = tf.reduce_mean(tf.cast(is_correct, tf.float32))\n",
    "    \n",
    "    # TensorBoard에 기록할 수치 등록\n",
    "    tf.summary.scalar('accuracy', accuracy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## NN 학습 (by mini-batch)\n",
    "## 학습 효율을 높이기 위한 기법들 (4)\n",
    "#### mini-batch 개수 조정\n",
    "#### epoch 횟수 조정\n",
    "\n",
    "## TensorBoard 보기\n",
    "학습을 돌린 뒤에 터미널을 열고 아래 명령 실행하시면 TensorBoard가 뜹니다.  \n",
    "http://localhost:6006 으로 접속하세요.\n",
    "```\n",
    "$ cd fashion_mnist  \n",
    "$ tensorboard --logdir=./logs\n",
    "```\n",
    "\n",
    "#### * 주의!: 새로 학습을 돌리는 경우에는 먼저 ./logs 폴더를 삭제해주세요. 안그러면 지난 번 학습 결과 그래프랑 겹쳐서 나와버립니다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 0001\n",
      "Train Error = 2.3024, Valid Error: 2.3024, Train Accuracy: 0.0938, Valid Accuracy: 0.1160\n",
      "Epoch: 0002\n",
      "Train Error = 2.3023, Valid Error: 2.3023, Train Accuracy: 0.1328, Valid Accuracy: 0.1196\n",
      "Epoch: 0003\n",
      "Train Error = 2.3021, Valid Error: 2.3021, Train Accuracy: 0.1250, Valid Accuracy: 0.1242\n",
      "Epoch: 0004\n",
      "Train Error = 2.3020, Valid Error: 2.3020, Train Accuracy: 0.0859, Valid Accuracy: 0.1242\n",
      "Epoch: 0005\n",
      "Train Error = 2.3018, Valid Error: 2.3018, Train Accuracy: 0.1250, Valid Accuracy: 0.1278\n",
      "Epoch: 0006\n",
      "Train Error = 2.3015, Valid Error: 2.3016, Train Accuracy: 0.1484, Valid Accuracy: 0.1364\n",
      "Epoch: 0007\n",
      "Train Error = 2.3017, Valid Error: 2.3014, Train Accuracy: 0.1016, Valid Accuracy: 0.1366\n",
      "Epoch: 0008\n",
      "Train Error = 2.3012, Valid Error: 2.3012, Train Accuracy: 0.1406, Valid Accuracy: 0.1496\n",
      "Epoch: 0009\n",
      "Train Error = 2.3008, Valid Error: 2.3009, Train Accuracy: 0.1484, Valid Accuracy: 0.1508\n",
      "Epoch: 0010\n",
      "Train Error = 2.3003, Valid Error: 2.3006, Train Accuracy: 0.2188, Valid Accuracy: 0.1552\n",
      "Epoch: 0011\n",
      "Train Error = 2.3005, Valid Error: 2.3002, Train Accuracy: 0.1328, Valid Accuracy: 0.1616\n",
      "Epoch: 0012\n",
      "Train Error = 2.3000, Valid Error: 2.2998, Train Accuracy: 0.1250, Valid Accuracy: 0.1774\n",
      "Epoch: 0013\n",
      "Train Error = 2.2988, Valid Error: 2.2992, Train Accuracy: 0.2344, Valid Accuracy: 0.1840\n",
      "Epoch: 0014\n",
      "Train Error = 2.2987, Valid Error: 2.2986, Train Accuracy: 0.1797, Valid Accuracy: 0.1790\n",
      "Epoch: 0015\n",
      "Train Error = 2.2974, Valid Error: 2.2978, Train Accuracy: 0.2031, Valid Accuracy: 0.1832\n",
      "Epoch: 0016\n",
      "Train Error = 2.2972, Valid Error: 2.2968, Train Accuracy: 0.1797, Valid Accuracy: 0.1868\n",
      "Epoch: 0017\n",
      "Train Error = 2.2953, Valid Error: 2.2955, Train Accuracy: 0.1875, Valid Accuracy: 0.1808\n",
      "Epoch: 0018\n",
      "Train Error = 2.2947, Valid Error: 2.2938, Train Accuracy: 0.1016, Valid Accuracy: 0.1802\n",
      "Epoch: 0019\n",
      "Train Error = 2.2913, Valid Error: 2.2917, Train Accuracy: 0.1406, Valid Accuracy: 0.1812\n",
      "Epoch: 0020\n",
      "Train Error = 2.2888, Valid Error: 2.2887, Train Accuracy: 0.1641, Valid Accuracy: 0.1752\n",
      "Epoch: 0021\n",
      "Train Error = 2.2872, Valid Error: 2.2847, Train Accuracy: 0.1172, Valid Accuracy: 0.1732\n",
      "Epoch: 0022\n",
      "Train Error = 2.2795, Valid Error: 2.2791, Train Accuracy: 0.1797, Valid Accuracy: 0.1632\n",
      "Epoch: 0023\n",
      "Train Error = 2.2721, Valid Error: 2.2709, Train Accuracy: 0.1250, Valid Accuracy: 0.1626\n",
      "Epoch: 0024\n",
      "Train Error = 2.2594, Valid Error: 2.2591, Train Accuracy: 0.2109, Valid Accuracy: 0.1680\n",
      "Epoch: 0025\n",
      "Train Error = 2.2391, Valid Error: 2.2420, Train Accuracy: 0.2031, Valid Accuracy: 0.1568\n",
      "Epoch: 0026\n",
      "Train Error = 2.2236, Valid Error: 2.2180, Train Accuracy: 0.0938, Valid Accuracy: 0.1616\n",
      "Epoch: 0027\n",
      "Train Error = 2.1830, Valid Error: 2.1868, Train Accuracy: 0.2109, Valid Accuracy: 0.1750\n",
      "Epoch: 0028\n",
      "Train Error = 2.1576, Valid Error: 2.1495, Train Accuracy: 0.2266, Valid Accuracy: 0.1798\n",
      "Epoch: 0029\n",
      "Train Error = 2.1050, Valid Error: 2.1078, Train Accuracy: 0.1953, Valid Accuracy: 0.1810\n",
      "Epoch: 0030\n",
      "Train Error = 2.0438, Valid Error: 2.0606, Train Accuracy: 0.2109, Valid Accuracy: 0.1880\n",
      "Epoch: 0031\n",
      "Train Error = 1.9993, Valid Error: 2.0030, Train Accuracy: 0.1953, Valid Accuracy: 0.2000\n",
      "Epoch: 0032\n",
      "Train Error = 1.9279, Valid Error: 1.9293, Train Accuracy: 0.2734, Valid Accuracy: 0.2350\n",
      "Epoch: 0033\n",
      "Train Error = 1.7969, Valid Error: 1.8401, Train Accuracy: 0.3906, Valid Accuracy: 0.2714\n",
      "Epoch: 0034\n",
      "Train Error = 1.8039, Valid Error: 1.7500, Train Accuracy: 0.2891, Valid Accuracy: 0.3376\n",
      "Epoch: 0035\n",
      "Train Error = 1.6696, Valid Error: 1.6678, Train Accuracy: 0.3984, Valid Accuracy: 0.3912\n",
      "Epoch: 0036\n",
      "Train Error = 1.6171, Valid Error: 1.5928, Train Accuracy: 0.3672, Valid Accuracy: 0.3992\n",
      "Epoch: 0037\n",
      "Train Error = 1.5660, Valid Error: 1.5251, Train Accuracy: 0.3516, Valid Accuracy: 0.4042\n",
      "Epoch: 0038\n",
      "Train Error = 1.4637, Valid Error: 1.4649, Train Accuracy: 0.3438, Valid Accuracy: 0.4118\n",
      "Epoch: 0039\n",
      "Train Error = 1.3901, Valid Error: 1.4135, Train Accuracy: 0.4609, Valid Accuracy: 0.4170\n",
      "Epoch: 0040\n",
      "Train Error = 1.3234, Valid Error: 1.3683, Train Accuracy: 0.4453, Valid Accuracy: 0.4400\n",
      "Epoch: 0041\n",
      "Train Error = 1.2788, Valid Error: 1.3298, Train Accuracy: 0.5156, Valid Accuracy: 0.4528\n",
      "Epoch: 0042\n",
      "Train Error = 1.2892, Valid Error: 1.2962, Train Accuracy: 0.5156, Valid Accuracy: 0.4698\n",
      "Epoch: 0043\n",
      "Train Error = 1.2486, Valid Error: 1.2661, Train Accuracy: 0.4688, Valid Accuracy: 0.4828\n",
      "Epoch: 0044\n",
      "Train Error = 1.3213, Valid Error: 1.2391, Train Accuracy: 0.5312, Valid Accuracy: 0.5074\n",
      "Epoch: 0045\n",
      "Train Error = 1.1986, Valid Error: 1.2151, Train Accuracy: 0.5000, Valid Accuracy: 0.5256\n",
      "Epoch: 0046\n",
      "Train Error = 1.2190, Valid Error: 1.1928, Train Accuracy: 0.5156, Valid Accuracy: 0.5378\n",
      "Epoch: 0047\n",
      "Train Error = 1.1351, Valid Error: 1.1720, Train Accuracy: 0.6406, Valid Accuracy: 0.5456\n",
      "Epoch: 0048\n",
      "Train Error = 1.1875, Valid Error: 1.1538, Train Accuracy: 0.5781, Valid Accuracy: 0.5568\n",
      "Epoch: 0049\n",
      "Train Error = 1.2764, Valid Error: 1.1363, Train Accuracy: 0.5312, Valid Accuracy: 0.5620\n",
      "Epoch: 0050\n",
      "Train Error = 1.0453, Valid Error: 1.1203, Train Accuracy: 0.5859, Valid Accuracy: 0.5730\n",
      "Epoch: 0051\n",
      "Train Error = 1.1445, Valid Error: 1.1046, Train Accuracy: 0.5312, Valid Accuracy: 0.5806\n",
      "Epoch: 0052\n",
      "Train Error = 1.1688, Valid Error: 1.0896, Train Accuracy: 0.5234, Valid Accuracy: 0.5802\n",
      "Epoch: 0053\n",
      "Train Error = 1.1180, Valid Error: 1.0756, Train Accuracy: 0.5703, Valid Accuracy: 0.5824\n",
      "Epoch: 0054\n",
      "Train Error = 1.0746, Valid Error: 1.0613, Train Accuracy: 0.5938, Valid Accuracy: 0.5948\n",
      "Epoch: 0055\n",
      "Train Error = 1.0357, Valid Error: 1.0477, Train Accuracy: 0.6328, Valid Accuracy: 0.5934\n",
      "Epoch: 0056\n",
      "Train Error = 1.1400, Valid Error: 1.0343, Train Accuracy: 0.6016, Valid Accuracy: 0.6116\n",
      "Epoch: 0057\n",
      "Train Error = 1.1891, Valid Error: 1.0219, Train Accuracy: 0.5938, Valid Accuracy: 0.6158\n",
      "Epoch: 0058\n",
      "Train Error = 1.1023, Valid Error: 1.0086, Train Accuracy: 0.5781, Valid Accuracy: 0.6258\n",
      "Epoch: 0059\n",
      "Train Error = 0.9654, Valid Error: 0.9958, Train Accuracy: 0.6250, Valid Accuracy: 0.6300\n",
      "Epoch: 0060\n",
      "Train Error = 1.0281, Valid Error: 0.9821, Train Accuracy: 0.6016, Valid Accuracy: 0.6332\n",
      "Epoch: 0061\n",
      "Train Error = 0.9877, Valid Error: 0.9700, Train Accuracy: 0.6172, Valid Accuracy: 0.6374\n",
      "Epoch: 0062\n",
      "Train Error = 0.8518, Valid Error: 0.9570, Train Accuracy: 0.6797, Valid Accuracy: 0.6504\n",
      "Epoch: 0063\n",
      "Train Error = 0.9448, Valid Error: 0.9455, Train Accuracy: 0.5625, Valid Accuracy: 0.6510\n",
      "Epoch: 0064\n",
      "Train Error = 1.0586, Valid Error: 0.9330, Train Accuracy: 0.5312, Valid Accuracy: 0.6582\n",
      "Epoch: 0065\n",
      "Train Error = 1.0188, Valid Error: 0.9232, Train Accuracy: 0.5469, Valid Accuracy: 0.6670\n",
      "Epoch: 0066\n",
      "Train Error = 0.8123, Valid Error: 0.9118, Train Accuracy: 0.7031, Valid Accuracy: 0.6688\n",
      "Epoch: 0067\n",
      "Train Error = 0.8947, Valid Error: 0.9027, Train Accuracy: 0.7422, Valid Accuracy: 0.6676\n",
      "Epoch: 0068\n",
      "Train Error = 0.8733, Valid Error: 0.8945, Train Accuracy: 0.7109, Valid Accuracy: 0.6614\n",
      "Epoch: 0069\n",
      "Train Error = 0.8332, Valid Error: 0.8867, Train Accuracy: 0.6875, Valid Accuracy: 0.6800\n",
      "Epoch: 0070\n",
      "Train Error = 0.8432, Valid Error: 0.8788, Train Accuracy: 0.6797, Valid Accuracy: 0.6632\n",
      "Epoch: 0071\n",
      "Train Error = 0.8620, Valid Error: 0.8723, Train Accuracy: 0.6953, Valid Accuracy: 0.6704\n",
      "Epoch: 0072\n",
      "Train Error = 0.8401, Valid Error: 0.8662, Train Accuracy: 0.6562, Valid Accuracy: 0.6864\n",
      "Epoch: 0073\n",
      "Train Error = 0.9228, Valid Error: 0.8610, Train Accuracy: 0.6562, Valid Accuracy: 0.6770\n",
      "Epoch: 0074\n",
      "Train Error = 0.9306, Valid Error: 0.8566, Train Accuracy: 0.7344, Valid Accuracy: 0.6888\n",
      "Epoch: 0075\n",
      "Train Error = 0.9856, Valid Error: 0.8517, Train Accuracy: 0.6172, Valid Accuracy: 0.6874\n",
      "Epoch: 0076\n",
      "Train Error = 0.8415, Valid Error: 0.8471, Train Accuracy: 0.6953, Valid Accuracy: 0.6850\n",
      "Epoch: 0077\n",
      "Train Error = 0.7732, Valid Error: 0.8428, Train Accuracy: 0.7266, Valid Accuracy: 0.6892\n",
      "Epoch: 0078\n",
      "Train Error = 0.8306, Valid Error: 0.8386, Train Accuracy: 0.6406, Valid Accuracy: 0.6896\n",
      "Epoch: 0079\n",
      "Train Error = 0.9451, Valid Error: 0.8362, Train Accuracy: 0.6250, Valid Accuracy: 0.6950\n",
      "Epoch: 0080\n",
      "Train Error = 0.9245, Valid Error: 0.8322, Train Accuracy: 0.6719, Valid Accuracy: 0.6904\n",
      "Epoch: 0081\n",
      "Train Error = 0.7100, Valid Error: 0.8283, Train Accuracy: 0.7266, Valid Accuracy: 0.6916\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 0082\n",
      "Train Error = 0.8424, Valid Error: 0.8268, Train Accuracy: 0.6797, Valid Accuracy: 0.6942\n",
      "Epoch: 0083\n",
      "Train Error = 0.9643, Valid Error: 0.8224, Train Accuracy: 0.6562, Valid Accuracy: 0.6956\n",
      "Epoch: 0084\n",
      "Train Error = 0.8058, Valid Error: 0.8196, Train Accuracy: 0.6875, Valid Accuracy: 0.6932\n",
      "Epoch: 0085\n",
      "Train Error = 0.6866, Valid Error: 0.8167, Train Accuracy: 0.7266, Valid Accuracy: 0.7004\n",
      "Epoch: 0086\n",
      "Train Error = 0.7513, Valid Error: 0.8138, Train Accuracy: 0.7734, Valid Accuracy: 0.6986\n",
      "Epoch: 0087\n",
      "Train Error = 0.7784, Valid Error: 0.8112, Train Accuracy: 0.7031, Valid Accuracy: 0.7040\n",
      "Epoch: 0088\n",
      "Train Error = 0.7761, Valid Error: 0.8078, Train Accuracy: 0.6719, Valid Accuracy: 0.7008\n",
      "Epoch: 0089\n",
      "Train Error = 0.8540, Valid Error: 0.8059, Train Accuracy: 0.6641, Valid Accuracy: 0.7088\n",
      "Epoch: 0090\n",
      "Train Error = 0.7117, Valid Error: 0.8040, Train Accuracy: 0.7734, Valid Accuracy: 0.7092\n",
      "Epoch: 0091\n",
      "Train Error = 0.8453, Valid Error: 0.8011, Train Accuracy: 0.7109, Valid Accuracy: 0.7136\n",
      "Epoch: 0092\n",
      "Train Error = 0.8418, Valid Error: 0.7993, Train Accuracy: 0.6328, Valid Accuracy: 0.7146\n",
      "Epoch: 0093\n",
      "Train Error = 0.8202, Valid Error: 0.7959, Train Accuracy: 0.6562, Valid Accuracy: 0.7100\n",
      "Epoch: 0094\n",
      "Train Error = 0.7273, Valid Error: 0.7939, Train Accuracy: 0.7578, Valid Accuracy: 0.7134\n",
      "Epoch: 0095\n",
      "Train Error = 1.1180, Valid Error: 0.7912, Train Accuracy: 0.6797, Valid Accuracy: 0.7098\n",
      "Epoch: 0096\n",
      "Train Error = 0.8648, Valid Error: 0.7887, Train Accuracy: 0.6406, Valid Accuracy: 0.7186\n",
      "Epoch: 0097\n",
      "Train Error = 0.7634, Valid Error: 0.7866, Train Accuracy: 0.7188, Valid Accuracy: 0.7162\n",
      "Epoch: 0098\n",
      "Train Error = 0.7129, Valid Error: 0.7846, Train Accuracy: 0.6953, Valid Accuracy: 0.7154\n",
      "Epoch: 0099\n",
      "Train Error = 0.7704, Valid Error: 0.7829, Train Accuracy: 0.7344, Valid Accuracy: 0.7162\n",
      "Epoch: 0100\n",
      "Train Error = 0.8215, Valid Error: 0.7802, Train Accuracy: 0.6875, Valid Accuracy: 0.7214\n",
      "Epoch: 0101\n",
      "Train Error = 0.7466, Valid Error: 0.7781, Train Accuracy: 0.7266, Valid Accuracy: 0.7238\n",
      "Epoch: 0102\n",
      "Train Error = 0.8095, Valid Error: 0.7755, Train Accuracy: 0.6641, Valid Accuracy: 0.7208\n",
      "Epoch: 0103\n",
      "Train Error = 0.7386, Valid Error: 0.7738, Train Accuracy: 0.7188, Valid Accuracy: 0.7174\n",
      "Epoch: 0104\n",
      "Train Error = 0.9697, Valid Error: 0.7713, Train Accuracy: 0.6875, Valid Accuracy: 0.7252\n",
      "Epoch: 0105\n",
      "Train Error = 0.6124, Valid Error: 0.7690, Train Accuracy: 0.7891, Valid Accuracy: 0.7222\n",
      "Epoch: 0106\n",
      "Train Error = 0.7319, Valid Error: 0.7669, Train Accuracy: 0.7188, Valid Accuracy: 0.7242\n",
      "Epoch: 0107\n",
      "Train Error = 0.8139, Valid Error: 0.7653, Train Accuracy: 0.6953, Valid Accuracy: 0.7290\n",
      "Epoch: 0108\n",
      "Train Error = 0.7185, Valid Error: 0.7642, Train Accuracy: 0.7500, Valid Accuracy: 0.7314\n",
      "Epoch: 0109\n",
      "Train Error = 0.9439, Valid Error: 0.7604, Train Accuracy: 0.6875, Valid Accuracy: 0.7312\n",
      "Epoch: 0110\n",
      "Train Error = 0.7645, Valid Error: 0.7596, Train Accuracy: 0.7109, Valid Accuracy: 0.7316\n",
      "Epoch: 0111\n",
      "Train Error = 0.6946, Valid Error: 0.7562, Train Accuracy: 0.7188, Valid Accuracy: 0.7290\n",
      "Epoch: 0112\n",
      "Train Error = 0.9992, Valid Error: 0.7540, Train Accuracy: 0.6875, Valid Accuracy: 0.7338\n",
      "Epoch: 0113\n",
      "Train Error = 0.6788, Valid Error: 0.7519, Train Accuracy: 0.7734, Valid Accuracy: 0.7286\n",
      "Epoch: 0114\n",
      "Train Error = 0.7471, Valid Error: 0.7500, Train Accuracy: 0.7344, Valid Accuracy: 0.7326\n",
      "Epoch: 0115\n",
      "Train Error = 0.9352, Valid Error: 0.7481, Train Accuracy: 0.6719, Valid Accuracy: 0.7344\n",
      "Epoch: 0116\n",
      "Train Error = 0.8510, Valid Error: 0.7456, Train Accuracy: 0.6719, Valid Accuracy: 0.7340\n",
      "Epoch: 0117\n",
      "Train Error = 0.7201, Valid Error: 0.7424, Train Accuracy: 0.7188, Valid Accuracy: 0.7360\n",
      "Epoch: 0118\n",
      "Train Error = 0.8091, Valid Error: 0.7410, Train Accuracy: 0.7031, Valid Accuracy: 0.7330\n",
      "Epoch: 0119\n",
      "Train Error = 0.7531, Valid Error: 0.7392, Train Accuracy: 0.7031, Valid Accuracy: 0.7400\n",
      "Epoch: 0120\n",
      "Train Error = 0.8791, Valid Error: 0.7363, Train Accuracy: 0.7266, Valid Accuracy: 0.7432\n",
      "Epoch: 0121\n",
      "Train Error = 0.7061, Valid Error: 0.7329, Train Accuracy: 0.7656, Valid Accuracy: 0.7402\n",
      "Epoch: 0122\n",
      "Train Error = 0.6991, Valid Error: 0.7309, Train Accuracy: 0.7500, Valid Accuracy: 0.7382\n",
      "Epoch: 0123\n",
      "Train Error = 0.6646, Valid Error: 0.7289, Train Accuracy: 0.7578, Valid Accuracy: 0.7428\n",
      "Epoch: 0124\n",
      "Train Error = 0.7394, Valid Error: 0.7262, Train Accuracy: 0.7109, Valid Accuracy: 0.7424\n",
      "Epoch: 0125\n",
      "Train Error = 0.7207, Valid Error: 0.7242, Train Accuracy: 0.6953, Valid Accuracy: 0.7456\n",
      "Epoch: 0126\n",
      "Train Error = 0.8622, Valid Error: 0.7204, Train Accuracy: 0.7031, Valid Accuracy: 0.7472\n",
      "Epoch: 0127\n",
      "Train Error = 0.7122, Valid Error: 0.7176, Train Accuracy: 0.7266, Valid Accuracy: 0.7442\n",
      "Epoch: 0128\n",
      "Train Error = 0.6951, Valid Error: 0.7156, Train Accuracy: 0.7266, Valid Accuracy: 0.7478\n",
      "Epoch: 0129\n",
      "Train Error = 0.7579, Valid Error: 0.7125, Train Accuracy: 0.7344, Valid Accuracy: 0.7476\n",
      "Epoch: 0130\n",
      "Train Error = 0.7993, Valid Error: 0.7093, Train Accuracy: 0.7422, Valid Accuracy: 0.7464\n",
      "Epoch: 0131\n",
      "Train Error = 0.7230, Valid Error: 0.7077, Train Accuracy: 0.7812, Valid Accuracy: 0.7460\n",
      "Epoch: 0132\n",
      "Train Error = 0.6739, Valid Error: 0.7033, Train Accuracy: 0.7734, Valid Accuracy: 0.7502\n",
      "Epoch: 0133\n",
      "Train Error = 0.6416, Valid Error: 0.7018, Train Accuracy: 0.7344, Valid Accuracy: 0.7456\n",
      "Epoch: 0134\n",
      "Train Error = 0.7060, Valid Error: 0.6993, Train Accuracy: 0.7734, Valid Accuracy: 0.7590\n",
      "Epoch: 0135\n",
      "Train Error = 0.9661, Valid Error: 0.6959, Train Accuracy: 0.6719, Valid Accuracy: 0.7600\n",
      "Epoch: 0136\n",
      "Train Error = 0.7395, Valid Error: 0.6911, Train Accuracy: 0.7422, Valid Accuracy: 0.7604\n",
      "Epoch: 0137\n",
      "Train Error = 0.6858, Valid Error: 0.6882, Train Accuracy: 0.7422, Valid Accuracy: 0.7602\n",
      "Epoch: 0138\n",
      "Train Error = 0.6886, Valid Error: 0.6851, Train Accuracy: 0.7422, Valid Accuracy: 0.7618\n",
      "Epoch: 0139\n",
      "Train Error = 0.6873, Valid Error: 0.6827, Train Accuracy: 0.7344, Valid Accuracy: 0.7638\n",
      "Epoch: 0140\n",
      "Train Error = 0.6300, Valid Error: 0.6790, Train Accuracy: 0.7344, Valid Accuracy: 0.7580\n",
      "Epoch: 0141\n",
      "Train Error = 0.6708, Valid Error: 0.6758, Train Accuracy: 0.8047, Valid Accuracy: 0.7658\n",
      "Epoch: 0142\n",
      "Train Error = 0.6041, Valid Error: 0.6725, Train Accuracy: 0.7891, Valid Accuracy: 0.7656\n",
      "Epoch: 0143\n",
      "Train Error = 0.9011, Valid Error: 0.6689, Train Accuracy: 0.6953, Valid Accuracy: 0.7658\n",
      "Epoch: 0144\n",
      "Train Error = 0.5785, Valid Error: 0.6669, Train Accuracy: 0.7734, Valid Accuracy: 0.7632\n",
      "Epoch: 0145\n",
      "Train Error = 0.6870, Valid Error: 0.6632, Train Accuracy: 0.7812, Valid Accuracy: 0.7680\n",
      "Epoch: 0146\n",
      "Train Error = 0.6162, Valid Error: 0.6593, Train Accuracy: 0.7734, Valid Accuracy: 0.7696\n",
      "Epoch: 0147\n",
      "Train Error = 0.7255, Valid Error: 0.6562, Train Accuracy: 0.6953, Valid Accuracy: 0.7708\n",
      "Epoch: 0148\n",
      "Train Error = 0.6186, Valid Error: 0.6533, Train Accuracy: 0.7500, Valid Accuracy: 0.7716\n",
      "Epoch: 0149\n",
      "Train Error = 0.6669, Valid Error: 0.6509, Train Accuracy: 0.7734, Valid Accuracy: 0.7724\n",
      "Epoch: 0150\n",
      "Train Error = 0.7390, Valid Error: 0.6492, Train Accuracy: 0.7734, Valid Accuracy: 0.7712\n",
      "Epoch: 0151\n",
      "Train Error = 0.6963, Valid Error: 0.6446, Train Accuracy: 0.7031, Valid Accuracy: 0.7746\n",
      "Epoch: 0152\n",
      "Train Error = 0.5937, Valid Error: 0.6434, Train Accuracy: 0.8125, Valid Accuracy: 0.7754\n",
      "Epoch: 0153\n",
      "Train Error = 0.7686, Valid Error: 0.6406, Train Accuracy: 0.7344, Valid Accuracy: 0.7732\n",
      "Epoch: 0154\n",
      "Train Error = 0.5912, Valid Error: 0.6368, Train Accuracy: 0.8125, Valid Accuracy: 0.7788\n",
      "Epoch: 0155\n",
      "Train Error = 0.6724, Valid Error: 0.6347, Train Accuracy: 0.7500, Valid Accuracy: 0.7766\n",
      "Epoch: 0156\n",
      "Train Error = 0.8103, Valid Error: 0.6315, Train Accuracy: 0.7891, Valid Accuracy: 0.7782\n",
      "Epoch: 0157\n",
      "Train Error = 0.6354, Valid Error: 0.6301, Train Accuracy: 0.7812, Valid Accuracy: 0.7764\n",
      "Epoch: 0158\n",
      "Train Error = 0.5821, Valid Error: 0.6280, Train Accuracy: 0.8125, Valid Accuracy: 0.7816\n",
      "Epoch: 0159\n",
      "Train Error = 0.6658, Valid Error: 0.6246, Train Accuracy: 0.7578, Valid Accuracy: 0.7796\n",
      "Epoch: 0160\n",
      "Train Error = 0.6720, Valid Error: 0.6215, Train Accuracy: 0.7656, Valid Accuracy: 0.7796\n",
      "Epoch: 0161\n",
      "Train Error = 0.6491, Valid Error: 0.6205, Train Accuracy: 0.7656, Valid Accuracy: 0.7796\n",
      "Epoch: 0162\n",
      "Train Error = 0.5958, Valid Error: 0.6180, Train Accuracy: 0.7656, Valid Accuracy: 0.7834\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch: 0163\n",
      "Train Error = 0.4829, Valid Error: 0.6179, Train Accuracy: 0.8516, Valid Accuracy: 0.7806\n",
      "Epoch: 0164\n",
      "Train Error = 0.6333, Valid Error: 0.6127, Train Accuracy: 0.7500, Valid Accuracy: 0.7868\n",
      "Epoch: 0165\n",
      "Train Error = 0.6182, Valid Error: 0.6115, Train Accuracy: 0.7812, Valid Accuracy: 0.7852\n",
      "Epoch: 0166\n",
      "Train Error = 0.6093, Valid Error: 0.6095, Train Accuracy: 0.8125, Valid Accuracy: 0.7852\n",
      "Epoch: 0167\n",
      "Train Error = 0.6516, Valid Error: 0.6091, Train Accuracy: 0.7188, Valid Accuracy: 0.7882\n",
      "Epoch: 0168\n",
      "Train Error = 0.5957, Valid Error: 0.6067, Train Accuracy: 0.7500, Valid Accuracy: 0.7870\n",
      "Epoch: 0169\n",
      "Train Error = 0.5396, Valid Error: 0.6044, Train Accuracy: 0.7734, Valid Accuracy: 0.7904\n",
      "Epoch: 0170\n",
      "Train Error = 0.5536, Valid Error: 0.6019, Train Accuracy: 0.7656, Valid Accuracy: 0.7912\n",
      "Epoch: 0171\n",
      "Train Error = 0.5516, Valid Error: 0.6010, Train Accuracy: 0.8047, Valid Accuracy: 0.7874\n",
      "Epoch: 0172\n",
      "Train Error = 0.6795, Valid Error: 0.6007, Train Accuracy: 0.7578, Valid Accuracy: 0.7900\n",
      "Epoch: 0173\n",
      "Train Error = 0.6935, Valid Error: 0.5968, Train Accuracy: 0.7812, Valid Accuracy: 0.7920\n",
      "Epoch: 0174\n",
      "Train Error = 0.5392, Valid Error: 0.5960, Train Accuracy: 0.7812, Valid Accuracy: 0.7930\n",
      "Epoch: 0175\n",
      "Train Error = 0.7984, Valid Error: 0.5958, Train Accuracy: 0.7031, Valid Accuracy: 0.7932\n",
      "Epoch: 0176\n",
      "Train Error = 0.5617, Valid Error: 0.5926, Train Accuracy: 0.7812, Valid Accuracy: 0.7952\n",
      "Epoch: 0177\n",
      "Train Error = 0.5329, Valid Error: 0.5914, Train Accuracy: 0.7969, Valid Accuracy: 0.7970\n",
      "Epoch: 0178\n",
      "Train Error = 0.4955, Valid Error: 0.5906, Train Accuracy: 0.8359, Valid Accuracy: 0.7970\n",
      "Epoch: 0179\n",
      "Train Error = 0.7200, Valid Error: 0.5894, Train Accuracy: 0.7344, Valid Accuracy: 0.7952\n",
      "Epoch: 0180\n",
      "Train Error = 0.6453, Valid Error: 0.5870, Train Accuracy: 0.7734, Valid Accuracy: 0.7990\n",
      "Epoch: 0181\n",
      "Train Error = 0.6569, Valid Error: 0.5852, Train Accuracy: 0.7422, Valid Accuracy: 0.7978\n",
      "Epoch: 0182\n",
      "Train Error = 0.6464, Valid Error: 0.5840, Train Accuracy: 0.7656, Valid Accuracy: 0.7982\n",
      "Epoch: 0183\n",
      "Train Error = 0.7094, Valid Error: 0.5823, Train Accuracy: 0.7656, Valid Accuracy: 0.7966\n",
      "Epoch: 0184\n",
      "Train Error = 0.4845, Valid Error: 0.5827, Train Accuracy: 0.7969, Valid Accuracy: 0.7990\n",
      "Epoch: 0185\n",
      "Train Error = 0.5476, Valid Error: 0.5805, Train Accuracy: 0.7891, Valid Accuracy: 0.8008\n",
      "Epoch: 0186\n",
      "Train Error = 0.5347, Valid Error: 0.5776, Train Accuracy: 0.8125, Valid Accuracy: 0.7996\n",
      "Epoch: 0187\n",
      "Train Error = 0.6461, Valid Error: 0.5782, Train Accuracy: 0.8047, Valid Accuracy: 0.8006\n",
      "Epoch: 0188\n",
      "Train Error = 0.7137, Valid Error: 0.5759, Train Accuracy: 0.7578, Valid Accuracy: 0.8028\n",
      "Epoch: 0189\n",
      "Train Error = 0.6483, Valid Error: 0.5745, Train Accuracy: 0.8047, Valid Accuracy: 0.8054\n",
      "Epoch: 0190\n",
      "Train Error = 0.5413, Valid Error: 0.5731, Train Accuracy: 0.7812, Valid Accuracy: 0.8058\n",
      "Epoch: 0191\n",
      "Train Error = 0.3860, Valid Error: 0.5727, Train Accuracy: 0.8828, Valid Accuracy: 0.8024\n",
      "Epoch: 0192\n",
      "Train Error = 0.6247, Valid Error: 0.5719, Train Accuracy: 0.7812, Valid Accuracy: 0.8026\n",
      "Epoch: 0193\n",
      "Train Error = 0.5124, Valid Error: 0.5703, Train Accuracy: 0.8203, Valid Accuracy: 0.8040\n",
      "Epoch: 0194\n",
      "Train Error = 0.5578, Valid Error: 0.5684, Train Accuracy: 0.7891, Valid Accuracy: 0.8068\n",
      "Epoch: 0195\n",
      "Train Error = 0.4766, Valid Error: 0.5677, Train Accuracy: 0.8438, Valid Accuracy: 0.8052\n",
      "Epoch: 0196\n",
      "Train Error = 0.5812, Valid Error: 0.5667, Train Accuracy: 0.8672, Valid Accuracy: 0.8070\n",
      "Epoch: 0197\n",
      "Train Error = 0.5215, Valid Error: 0.5665, Train Accuracy: 0.7891, Valid Accuracy: 0.8056\n",
      "Epoch: 0198\n",
      "Train Error = 0.6074, Valid Error: 0.5648, Train Accuracy: 0.8359, Valid Accuracy: 0.8074\n",
      "Epoch: 0199\n",
      "Train Error = 0.5398, Valid Error: 0.5632, Train Accuracy: 0.8047, Valid Accuracy: 0.8074\n",
      "Epoch: 0200\n",
      "Train Error = 0.4682, Valid Error: 0.5620, Train Accuracy: 0.8281, Valid Accuracy: 0.8078\n"
     ]
    }
   ],
   "source": [
    "# 미니 배치의 크기 (이미지 수)\n",
    "mini_batch_size = 128\n",
    "# 배치 횟수 (몇 번의 배치를 돌아야 1 Epoch이 완성 되는가)\n",
    "batch_count = int(fashion_mnist.train.num_examples / mini_batch_size)\n",
    "# Epoch 횟수\n",
    "epoch_count = 200 \n",
    "# Validation 배치의 크기 (이미지 수)\n",
    "valid_batch_size = 5000\n",
    "# Drop Out시 Weight 사용율\n",
    "keep_prob_val = 1.0\n",
    "\n",
    "\n",
    "# >>>>>>>>>> 학습 세션 시작!\n",
    "with tf.Session() as sess: \n",
    "    # 세션 초기화\n",
    "    saver = tf.train.Saver(tf.global_variables(), max_to_keep=int(epoch_count/4))\n",
    "    sess.run(tf.global_variables_initializer())\n",
    "\n",
    "    # TensorBoard에 기록할 항목들을 merge 하고 실제 내용을 기록할 FileWriter를 생성\n",
    "    merged = tf.summary.merge_all()\n",
    "    train_writer = tf.summary.FileWriter('./logs/train', sess.graph)\n",
    "    valid_writer = tf.summary.FileWriter('./logs/valid', sess.graph)\n",
    "    \n",
    "    for epoch in range(epoch_count):\n",
    "        # Epoch 시작 --------------------\n",
    "        err_val = 0.0\n",
    "        acc_val = 0.0\n",
    "        \n",
    "        for i in range(batch_count):\n",
    "            # 미니 배치 시작 --------------\n",
    "\n",
    "            # mnist.train.next_batch: 최초 1회 training set을 shuffle한 다음 mini_batch_size 만큼 반환\n",
    "            train_x, train_y = fashion_mnist.train.next_batch(mini_batch_size)\n",
    "\n",
    "            if i < batch_count-1:\n",
    "                # 평소에는 optimizer(gradient descent), error, accuracy만 계산\n",
    "                _, err_val, acc_val = sess.run([optimizer, error, accuracy], \n",
    "                                               feed_dict={\n",
    "                                                   X: train_x, \n",
    "                                                   Y: train_y, \n",
    "                                                   is_training: True, \n",
    "                                                   keep_prob: keep_prob_val})\n",
    "            else:\n",
    "                # 마지막 미니 배치때에만 summary 항목도 계산\n",
    "                _, err_val, acc_val, summary = sess.run([optimizer, error, accuracy, merged], \n",
    "                                                        feed_dict={\n",
    "                                                            X: train_x, \n",
    "                                                            Y: train_y, \n",
    "                                                            is_training: True, \n",
    "                                                            keep_prob: keep_prob_val})\n",
    "                train_writer.add_summary(summary, epoch)\n",
    "            \n",
    "            # 미니 배치 끝 ---------------\n",
    "        \n",
    "        # Epoch 검증: Validation 데이터셋 예측하기    \n",
    "        valid_x, valid_y = fashion_mnist.validation.next_batch(valid_batch_size)\n",
    "        valid_err_val, valid_acc_val, summary = sess.run([error, accuracy, merged], \n",
    "                                                         feed_dict={\n",
    "                                                             X: valid_x, \n",
    "                                                             Y: valid_y, \n",
    "                                                             is_training: False,\n",
    "                                                             keep_prob: 1.0})\n",
    "        valid_writer.add_summary(summary, epoch)\n",
    "\n",
    "        print('Epoch:', '%04d' % (epoch + 1))\n",
    "        print('Train Error = {:.4f}, Valid Error: {:.4f}, Train Accuracy: {:.4f}, Valid Accuracy: {:.4f}'.format(\n",
    "            err_val,\n",
    "            valid_err_val, \n",
    "            acc_val,\n",
    "            valid_acc_val))\n",
    "        \n",
    "        saver.save(sess, './model/fashion_mnist.chkp', global_step=epoch)\n",
    "        # Epoch 끝  --------------------\n",
    "        \n",
    "# tf.Session 끝"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test 데이터 셋으로 정확도 확인하기\n",
    "\n",
    "#### best_epoch에 위에서 학습 시 제일 성능이 좋았던 epoch number 할당"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Restoring parameters from ./model/fashion_mnist.chkp-199\n",
      "Your final accuracy score on the 10000 test sets are 79.500002\n"
     ]
    }
   ],
   "source": [
    "# 성능 제일 좋았던 epoch 넘버\n",
    "best_epoch = 199\n",
    "\n",
    "# 검증용으로 사용할 이미지 꺼내어 놓기\n",
    "test_x_all = fashion_mnist.test._images\n",
    "test_y_all = fashion_mnist.test._labels\n",
    "\n",
    "with tf.Session() as sess: \n",
    "    # 세션 초기화\n",
    "    saver = tf.train.Saver(tf.global_variables())\n",
    "    saver.restore(sess, \"./model/fashion_mnist.chkp-{}\".format(best_epoch))\n",
    "\n",
    "    final_result = sess.run(accuracy, \n",
    "                             feed_dict={\n",
    "                                 X: test_x_all, \n",
    "                                 Y: test_y_all, \n",
    "                                 is_training: False,\n",
    "                                 keep_prob: 1.0})\n",
    "    print(\"Your final accuracy score on the {} test sets are {}\"\n",
    "          .format(fashion_mnist.test.num_examples,\n",
    "                 round(final_result * 100, 6)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 그림 확인 하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Restoring parameters from ./model/fashion_mnist.chkp-199\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZsAAAEYCAYAAACKvFuOAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMi4yLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvhp/UCwAAIABJREFUeJzsnXl4XVW58H/vGTLPTdu06ZDSGWjLUIoMWhAslOmC4oAKoqKichXw8+n9lMEZnFG4gKiIn14QFC6T4ICMtRN0opS20CFNmjRtmmZOTpJzzvr+WHut7nOazjmZzvo9z3my99nD2fvN2utd77DeLUopHA6Hw+FIJYGBvgCHw+FwDH+csnE4HA5HynHKxuFwOBwpxykbh8PhcKQcp2wcDofDkXKcsnE4HA5Hykm5shERJSJTjnTbIc55rYgsPvarGx6ISIUny5C3/rKIXDfQ1+VwOFLHofpBEXleRD7Vn9d0MA5b2XgdWKOIZKbyggYSETlHRHYM8DVUikiniLSJyC4R+Z2I5A3kNQ1VPBmaT9wn1zYR+cRAX99Qw8lzYBCRs0VkiYg0i8heEfm3iJx2qOOUUguVUr8/yHn7ddB+WMpGRCqA9wIKuCyF1+PQXKqUygNOAU4Dbhng6zkkIhIc6GtIRimVZz5AFZ5cvc//JO9vLMOBZDBcw4Fw8ux/RKQAeBa4GygByoFvA13HeN5+l8vhWjbXAMuAh4AEs0xEHhKR/xaRv4pIq4gsF5HJvZ3E09DVInJuL9syReQnIlLljejvF5Hsg1yTiMjdnrbfKCLn+TaMFZGnvVHAZhH5XNLv3CUitd7nLu+7XOB5YKxvtDb2MOWTEpRSNd41nehZPOebbSLyLRH546HOISIBEblFRLaLyG4R+X8iUuht+5uI3JC0/1oR+aC3PENE/unJcZOIfMS330Micp+IPCci7cB+/9PBjoh8T0QeFZFHRKQV+KSIZInIL0Vkp4jUiMjPRCTD2/86EXnZd3zIc19WeOuXiMgG7znYISI3+fa9zJNtk4gsFpETfdt2iMjXRWQd0NFPt9/nOHmmhGkASqlHlFIxpVSnUuofSqk3zQ5ev9koIttEZKHve+tOF23F/FtEfi4ie4FHgfuBM7y+rinVN3IkyuZ/vM8FIjI6aftVaG1bDGwGvp98AhG5AHgE+JBS6qVefuOHaMGeBExBa/DbDnJNpwNbgVLgduAJESnxtj0C7ADGAlcCP/Apo28C7/F+Zw4wD7hFKdUOLARqfaO12oP8fsoRkfHARcDqYzjNtd7nXOA4IA+4x9v2MPp/Z37veGAi8FdP+f7T22eUt9+9InKC79wfR/+v84GhGkO7An2PhegH8DZgLjAbOBk4C/i/h3mu3wGfVUrle8e/AiDa5fFr4DpgBPAg8JTpdD0+hm5/hcd4PwONk2ff8g4QE5Hfi8hCESlO2n46sAndD/4I+K2IyAHOZfrMUcAngeuBpV5fV5Say/ehlDroBzgb6AFKvfWNwE2+7Q8Bv/GtXwRs9K0rdOPaDsxKOrdCKxYB2oHJvm1nANsOcE3XArWA+L5bAVwNjAdiQL5v2x3AQ97yFuAi37YLgEpv+Rxgx6FkksoPUAm0AU2ezO4Fsr3vz/ft9y3gj95yhSfLkLf+MnCdt/wv4Eu+46Z7/88QWkm0AxO9bd8HHvSWPwq8lnRtvwJu9/3f/99Ayuoo5Hp+0nffA15M+m47sMC3fjGw2Vu+DnjZty3kyb3CW6/19slPOuevjdx8320BzvKWdwDXDLSMnDwH5weY6T1vO4Ao8DQwGt0Pbvbtl+PJr8xb9/cD1wJVSee9FljcX/dxOJbNp4B/KKX2eOsPk+RKA+p8yx3o0bOfG4HHlFLrDvAbIz1BrfTM4ibgb973B6JGeRLz2I62ZMYCe5VSrUnbyr3lsd568nGDicuVUkVKqYlKqS8ppTqP4Vy93W8IGO3J6K/oUSDeX+N7nwicbv4f3v/kE0CZ71zVx3Bdg4XkexjD/vIq5/C4Ah3TrPJcGKd7308EFiXJckzSeYeDLMHJs89RSm1QSl2rlBoHnIh+pu/yNtf59jMuwwMlFA2oTA6qbETHTD4CzBeROhGpA24C5ojInCP4nQ8Dl4vIjQfYvgfoBE7wOtkipVSh0oHIA1GeZC5OQI+EaoESEclP2lbjLdeiG2vycaBHBYOVdrRCNpQdaMckervfKLDLW38EuEpEzkBbUMbFWQ284vt/FCltbn/Rd67BLK/DJfkedrK/vEzbOej/QCm1XCl1GdpN8SzwJ29TNfDtJFnmKKUeO8h1DFWcPFOIUmoj2so58RC79nr4IdZTyqEsm8vRLqnj0TGOk9Am3WvoOM7hUgucB3xFRL6UvFEpFUebxj8XkVEAIlLuxXkOxCjvfGER+bB3Xc8ppaqBJcAdXnByNvBZ9o3YHwFuEZGRIlKK9imbQPsuYIR4AfRBxhrgY979zkXHog6HR4CbRGSS6BTqHwCPKqWi3vbn0J3Bd7zv4973zwLTRORq7zfDInKaiMzsu1salDwC3CYipSIyEriVfe1jLTBbRGZ5A7HbzUEiki0iHxeRAqVUD9CKfnYAHgC+7MlPRCRPRC714mLDHSfPY0B0ks7XRGSctz4eHT9d1gen3wWMS4p1pYxDKZtPAb9TSlUpperMBx1g/oQcQfqcUqoKrXAWSe8TDhehkwuWiUgL8AI6vnAglgNT0VbR94ErlVIN3rar0HGMWuB/0f7df3rbvge8AbwJrANWed+ZUcMjwFbPPB9M7rVbgclAIzoZ4+HDPO5B4A/Aq8A2IAL8p9molOoCngDO95/Tc7EtQLvWatHm+g+BYTvPyuPb6E5wHbqNLEfH/FBKvY1W1i+jg7KvJh37KWC7134/i44hopRaDnwRuA/9/3sHHaBNB5w8j41WdGB/ueisz2XAW8DX+uDcLwLrgToR2XOonY8VSQx7OBwOh8PR97jaaA6Hw+FIOU7ZOBwOhyPlOGXjcDgcjpTjlI3D4XA4Uk6fF2MrLS1VFRUVfX3aPqGyspI9e/YcqJTDoONwZamUYtcuPW1m7969RKM6qzkajRII6PFELBZLOEZE7DYRIS9PT2kaOXIkBQUFh/zNoSZLOPq2uXHjRgDa29sTvg8EAsTjcbtupn0ppZgyRb85o7Dw8LLoh5o8j0aW9fX1VFdXEwzqmq3hcJju7m7C4TAAWVlZRCIRQMuyoKCA7GxdHnHEiBGH/TsrV67co5Q62ITwQceRyNO0uZaWFjo6Omhubga0/Pzbo9EooVAo4TvTHouKisjIOLyM576SZ58rm4qKCt54442+Pm2fMHfu3IG+hCPicGUZiUS46y49ofiRRx6hsbER0A+3eVjNd4bMzEzbOEOhEO973/sA+NznPseFF154yN8carKEI2ub5uEMBAKcffbZAPz73/9O2CcvL4+ODj1pOxqNWnl2dnby85//HIBLLrnksH5vqMnzaJ7ze++9l5tvvpniYl3ea8yYMWzbto3ycj3xf9q0aWzYsAHQHef555/P7NmzAbj66qsP+3dEZPuh9xpcJMszOUvYP3+9tVUXR3nxxRdZtWoVzz//PADTp09HRGhrawOgoaHBKulIJEIsFuPSSy8F4LLLLmPChAmHdW19Jc8hXX7bAYsWLeKBBx6gpaUFgJycHKtgiouL6ezUlW5yc3OJxWJkZuppMtnZ2bZBd3V18de//hWAp59+mjPOOINXX02e8pBeGKsPYO3atYCW58iReoDX3t5OLBajpETXfg2Hw1aemzdvttbQ4SqbdKC+vp6KiooE2ZaVlVmru6GhwY7SCwoKqKmpYcaMGQNyrQON30r2K5oHHniATZs2AXpANGPGDD760Y8CsGbNGjIzM61nY/r06eTn60Iqubm51NfXs3271hs33XQTubl6Duydd97J2LGpn1LolM0Q5YEHHgDgRz/6EWVlZbbhiIjt9Hp6euxoOysrK8F1Zhqk2WbcaMFgkH//+992BPTMM8/0zw0NYsxIsbS01Cr1eDxOZmamtYDa2tqsIgeorh42pbn6jIaGBkaOHMmWLVsAKCkpobW11XaITU1Ntu22tLQQCASYNWvWgF3vQGLkYBTNvffeC2g3+aRJkwA9wInFYowaNQqA+fPn88QTT1BWpqv+ZGRk2Od91qxZPP/880ydOhXQ7jSjeG655RYefPDBlN+TSxBwOBwOR8pxls0Q5dZbbwW0u0FErCuirm5fAe6ioqKEuExbW5sNwI4YMcIeEwqF6OrSL/5TSjF69GjrRtuzZw+lpaX9c1ODEJN4AVpOfpdGNBq1we1gMGi3FRQUsHv37v690CHAxIkTWbt2rU0QCAaD5Obm2kB1LBazo/LGxkbrJkpH/JZNdXW1tZSPO+44a2mDdo+ZNjp58mQmT57Mu+++C2jL8fTTdaHsV199lbFjx9rnv6Ojw7rb6+rq+MMf/mDjYsmuu77CKZshivFtZ2ZmopSySuaLX/wiX/jCFwA45ZRTrHttx44d5OfnM3GiLsC7a9cu6/bZsWOHDdJmZmbS2tpqYz1bt25Na2Xz1ltv2eWMjAwrl2AwSCgUsm40pZRdzszMZM+elJeaGnKICLNmzbJtUinFli1bbPJKPB5n2rRpdv/JkyfbbKp0wx/X2rx5s1XQ0WjUury7urqIxWJ2vampiYULF7J4sX6PYXZ2dkJmallZmc2obG1tpbu7G9DtdfXq1VbZpELRgHOjORwOh6MfSM9hwzDAuL2ysrIS0iTvuOMOm0sfj8dtau4555zDSy/texv3zJkzbcZUS0sLv/jFLwDtnhs5cqR1sS1evJh58+al/oYGKWvXrrVunqysLCvPSCRCc3OzTS31J2Z0dXXZ0btjH4FAgPHjx3P88ccDWmZ//vOf2bt3LwDr16+3Kfinnnoq5eXldvSdk5PT+0nTgPXr11t3eFdXl21nOTk5xONxa/W0tLQwZswYFixYAGjr22ybMmVKggckGo1alxrAihUrUn4fQ1rZmA4xEAgkmH5dXV3WRfTuu+/aDIzhgnkAQT+wRvEAXHPNNTz11FN23bgoXnrpJW677TY7YfNPf/qTfci3b99u0ydvvfVWYrGYdV+sWbMmtTczyHn99detS6Ojo8PKpbm5mVNOOcXKp7i42La5jo4Oxo8fPzAXPIiZOXMm//rXv5g5U78SKTMzkxNOOMEOZj7/+c/buR/jxo2juLjYxhXSmR07dtjn1v+sjx49mo6ODusqC4fDrF+/3mbwNTY22pTm2tpampqabHynrKyM9evXAzBp0iRGjBhh+5XDnex5pAxqZWPfXe097DU1NSxduhSAhQsXHnD06E9BfeKJJ1i0aFHqL7Yfqa2ttcuBQMDGEUA3TD9//vOf7fLVV19tH95YLMacOfplqzt37rR+32RMsDFd2bBhg00CCAQCNjg7ZswYli1bZgc58Xg8Yea2mX/j2EdHRwe5ubl2dG0md5rOsqury8owKyuLUChkR9/+ZzqdMMrBtLumpiY70dWkPhuCwSCZmZk0NTUBelDqnwaxc+dOK8fu7m67H+j2++abbwKpm2DsYjYOh8PhSDmD2rKBxKyM1157jeXLlwN6dP+Vr3yl12N2797N3//+dwA7YWw4UV9fn7DuT8Gtra1NqNc1f/58u3zBBRewbds2QKdFmjIX55xzjrVy8vLyEvzA/lTqdKS5udnKwm/ZfPCDH0zYLxqNJsQV/K5OhyY3N5eOjg77TNfW1hKNRjnppJMA7RI2Vnp3dzexWMy263Rl69at5OXlWQuvvb3dWtN79+6lp6cnIfbif3ZFxKbgiwiRSISenh5AW5n+rLZQKGT7hlRZNoNa2ZjYweuvvw5ol8bo0aMB7d654oorAG2ORyIRm9bb0NBgZ3qblN7hRE1NjV32BwtBKwfzMCulbGmLRYsWsXXrVnucP0GgqqrKzlBetmxZQvzB/1vpyK5du3p111511VXAPvfO3r17E1LETSKBYx/Z2dkEAoEEl21eXh4nn3yyXTdyy87OJjMzM+2VTXV1NVlZWQkDSDPzv6KigoyMDOtKi0aj5OfnW5lt377dHhcKhcjKykqYj2fadTgcJhwO274iVTg3msPhcDhSzqC0bPzauL29nb/85S+AHkUak7G1tdWO6k0igcmuMJkssH9p/eGA340WDAaJRqM2yJqXl8c3vvENQI90/vGPfwA6hXf9+vXW4tu4caNNnPjoRz+akHUWj8etqW7M7nSls7PTumL9bencc88F4IwzzgBg6dKlCfXmjqQkfroQDAYJh8O2bflfbQHamjHtLTc3NyF1N12pra0lEAgkZKOZqs+BQIBoNJow4TMQCNiMtXg8bttuY2MjWVlZ1k1ZUFBg+5HCwkLi8bgtOJsqBkTZmHIIRqmIiG2AsVgsoYHdf//91nWWlZVlTchIJGK/j0ajiIg1CzMzM+0M+66urv3eQzLU2blzp10OBAIopWxHV1hYyB133GG3mzk3o0eP5u2337bfl5WV2VnuJoff4E99NutA2j/4PT09Vi7GfWbeQbJ48eKE+U6H+x6bdKK0tDThue/u7k5oe/n5+VaGWVlZlJeXJ8Rs05G2tjYyMjLs4Hn79u38x3/8h90mItZt1tXVRVdXl1XYoVDILkciEUTEynvGjBl2ikQgECAcDidktaaC9P5POhwOh6Nf6DfLxl/czfz1j1p6Gz0/8sgj1NXV2QBiNBq1ueElJSXWVbFnzx7a2toS3BhmhNTR0THs5ookZ6NlZGTw/ve/H9AZe+PGjQO0LI1J7a+hBFqWxjLs6uqy24qKilizZk3CPJHKykpA16pKR0x77e7u3k8GRtaxWCxlNaWGC2PGjEmY+9HR0ZHgpo1Go9Y7UVBQkBAUT1cikQjZ2dkJngZTgeG1115LeKYDgQBNTU3WCjIWC2grx295T5s2zVoySqkEb1Cq6Ddl438QzQQ4f4qeX8mYdyu88847jB8/noaGBkALxQiovLzc+i5FhJycHBvPSa5aatKghwv+yVitra2Ul5dz7bXXAvD8888npOCaBzb5wRWRhMl0pjF/8IMf3K9qgHG3pauyMbJpb2/nhBNOSNh20UUXAfq9Qq5zPDg5OTnk5OTYDjIej9sqFqDjNGZwlJmZmdZxL/Ns9vT0EIvFrKIIh8O2KoBfacO+GLe/hJLpB/2VtUGXrzHHxWIxenp6bFp/W1vbASd5HwspVTbJ72c3wgkEAvv5Ys2s+CeeeMIqlKlTp9LW1mYbYENDg9XUIpKQXhoIBKwfPRAIJLxMLPl1vkMdo3xBB7BHjRplRzOAlZGJZQH7ydv/WgJ/yRtTktzsn5x2mY4YOSmlOO644xK2mflJ3d3dCZa1q422P+aVAv5KC+bNp6Cfd/PsJ88fSTfMAM8MnE0bDIfDCZWcQ6GQndOVl5dHTk6OtRZN3wBa9kopO6gfO3ZsQp+QnZ1t+4q6ujqmTJnS5/fkYjYOh8PhSDkptWx6G00b6uvrbSxg06ZNNsMqIyPDpvk1NTXR0tJiNXVXV5fVzJWVlVbDFxUVJUxuUkol1AAzJmGqsy36i6amJptVEolEyM3NZcOGDXa7cfv4/eHJ8YTkGJpxzflrfZn90vndLOPGjbPZjIFAYL93tft96c6yOTTRaNS6zqLRaIJFfvzxx9uXhLW0tKR1EU7zPEajUbKysuz6hAkTbDpze3s7o0ePtu3OhCaMRdjZ2Wn7S5OZZkIPbW1tNmYbDAYTXHW7d+9OiWWTUmWza9cum6rc3t5uH9rOzk62bduW4Gs0AozH4zZQ1dnZSSgU2m9WMWi3xZgxYwDdMDs6OmzDbWtrsw06Ly/PllwZLnNukt1a06dPt+91h0SFYZb9wUGzj2mk5gVsgDW7/comOSEhnRg1apStvBCNRnnnnXcStvsr5PoVj6sg0DsNDQ22Cvvzzz9vX/QH+mV/ptR9eXl5WrtvzXObl5dHZmamnd0/Y8YMO3g27c30az09PYiI7SOzs7Ot4jEJLKZfzM3NtdWhW1tbKS4utr/pfxNoX+LcaA6Hw+FIOSmxbF544QVAB/2N9q2vr09Ib/ZbM21tbdb6UErZYHVxcTHxeNxq2lgsZt0TeXl5FBUV2XP7KS4uti68zs7OYVcU0T+5ELRl88orr9j13lLA4/F4glvTVF2AxHTzcePGMW7cuATXWapGOkOBefPmWRdlZmbmQd/v43/XSLqWxD8Ur7zyCps3bwa0ZfOHP/zBbjvxxBPtyPuee+5hzpw5nHrqqQNynQONSQIKhUJ0dnZab8+cOXNsf9fS0oKIJIQZcnJybN/gf/1IPB4nHA7bZ72qqspmly5ZsoTOzk5mzJhhz5sK+lzZtLS08Otf/xrQJp9xdeXn51uz2MRXTGeXn59vFUIgELB+RZPq7K8uYJTSrl277Ix4UyHWkJeXZ112WVlZ1uxMdR55f5GdnZ2gIAKBgC2qmfyOi2T8GWhGrn7FtXnzZsrKyqycw+FwWruE3ve+9/G73/0O0O129erVve5nSof41x2JKKWIxWJW2UydOjWhgkAoFLLP6IoVKxLkmW6sWrUK0IPlzs5O+16b4uJi3njjDUCnkvsze2OxGBkZGVZusVjMPu+ZmZlkZmbaZ33t2rU2Np6dnU1nZ6d9zt944w2uvPLKPr8n90Q4HA6HI+X0uWWTm5trJ76tW7eOxYsX221m/kd+fj4lJSV2lnphYaG1bJRS1oTctGkTHR0d1qwTEVssbvbs2bYu1T//+U+6uroSRpNGg48dO9Zq8OGSIBAKhRLupaenx7ofzHvJeyM5I81fwM/w1FNPUVFRYUdWgUDAvlo6HTnzzDPt6DsYDNoEimQKCgoSkjDSObh9IESE7u5u69pJdjV2d3dbl1Bzc3NaF4E14YJIJEJNTY319syZM8f2gUVFRQleBxOC8IcrjFcnIyODYDBo+4DKykouu+wyAD772c/ykY98xE4GN96ovqbPlU0wGOS2226z68bfv3z5cptRsWTJEiorK+1rSNvb2+2DKiJWaZSUlDBr1izOP/98QM/WTi4aCXDZZZdRVVVlZ84WFBTYeFAoFLKN2rx4bagTCAQSJrxt3LgxYea1eUjNRC6DP06TXNHBUFlZyezZs22lbb9POB2ZOHFiQsVdI/etW7cmTPAMh8MJchouA5u+JiMjww4ek9PDw+FwQtp+WVlZv1/fYOHTn/60XW5ra7MZkZMnT+aJJ54AtEutra3NPr9FRUXs2bPHDtwjkUjCBNBAIGAHS8uWLbOZgPX19eTl5fXat/YlKS9XYzTreeedx3nnnQfAl770pT79jaeffvqw9kvVG+j6m8zMzAQF0djYmPCu9uR4jvnrj9P4KzoopWyV4qVLlzJt2jR7vP/tiemKUeTRaNQ+yMnKZsyYMXbeWHFxsVM2B8CfjpvcuWVkZCQktPjTytOZvLw8Zs+eDeg0ZeP5KSkpSVDKHR0dNDQ0WBlmZGTY57+rqytBnh0dHTbZxZRcSjUuZuNwOByOlOOUzRAkHA7booYAN998M1lZWfblSD09PfbT3d1tfeE9PT32RWvJ25qbm2lubmbOnDlccskl9rdM5Wh/Wm864Hc5XnHFFVxxxRX09PTYIrL+WCSQUPxUKUVxcXHC7HiHpq6uzmZJJce18vLybHZVPB5P6woCBpPBZ1i8eDGhUMi6G02MNh6Ps3nzZsrLy+30BfN9PB63lUays7PJzs6mvLycV199lVdffdX+TqoZlG/qdByc9vZ26yozsQJT0PDdd9+17p2DBan95WrC4bBNAhg1ahSlpaV2v0AgYKtApBP+2JZ5WdXvf/9764p4/PHH+da3vmX3979iwD+L25HI6NGj2b17N7D/y/j88+O6uroOmIyRTiRXxN+0aZOdX2iqtZtY+KRJk8jNzaWmpsZuN31AZ2cnSinbfjMyMuz0BvM7vcVz+xJn2TgcDocj5TjLZghy1llnsXTpUkAHWadNm7Zfza5jYevWrTabr6uri3nz5vXZuYcKZkQYCARYuHAhoEfexp2YPGnzxBNPZN26dYD+n/hf3e3Yx8KFC+2kxGTLJj8/3yaqRCIRJk6c2O/XNxiJxWJWVtu3b7dtcNq0aQSDQTvzv6SkhLfffttaJv5KI0a2JsGlq6vLpk13dXUl1EdMlWXjlM0QZN68eTZDzJ9x0lf09PTYBt3d3Z2WFYyTO0LQadDLli0DdDbPkiVLOPPMMwHdIZgsq+7u7rSulH0wsrKyrJx6k7Fp1x0dHfYtqOmOv/P/wQ9+wI9//GNAl/tpampi0qRJwL7SNsb92NjYaNPMGxsbqaursy640tJSbrjhBoCE94ClEudGczgcDkfKcZbNEKS8vJyTTz4Z0CNFv+URjUbtiPFIMkz8RTmnTJnCxRdfDOj3apxxxhl9delDht5cCZ/73Oesy+JjH/uYtWoArr76alvXKy8vj/e+9739c6FDjGuuucZm8hn3pB8zqx2wJfDTneQ3avonzVdVVdkakbt27aKlpSUhMchUbQmHw0yYMIGzzjoLICWvfT4U0tcpbyJSDwzW9KWJSqmRh95tcOBk2bc4efYdTpZ9SzrIs8+VjcPhcDgcybiYjcPhcDhSjlM2DofD4Ug5Ttk4HA6HI+U4ZeNwOByOlOOUjcPhcDhSjlM2DofD4Ug5Ttk4HA6HI+U4ZeNwOByOlOOUjcPhcDhSjlM2DofD4Ug5Ttk4HA6HI+U4ZeNwOByOlOOUjcPhcDhSjlM2DofD4Ug5Ttk4HAdBRK4VkcUH2f68iHyqP68p3RARJSJTDmO/Cm9f91LIXhCRShE5f6B+/5iVjYi0+T5xEen0rX+iLy7S0Tsi8nERecOT9U6v4zv7GM/5sohc11fXOFQQkbNFZImINIvIXhH5t4icdqjjlFILlVK/P8h5D6qshjJHKzNHesrumEcASin7flERqQSuU0q9cKD9RSSklIoe6+8eC4PhGo4VEbkZ+C/geuDvQDdwIfAfwLDs3FKFiBQAzwJfBB4DMoD3Al3HeN5hO8JOlczSgaEuu6PuP5VSffYBKoHzk777HvAo8AjQClwLZAG/BHYCNcDPgAxv/+uAl33HhwAFVHjrlwAbvHPtAG7y7XsZsBZoQne4J/q27QCJAZuUAAAgAElEQVS+DqwDuvvyvvv7AxQCbcCHD7A9E7gLqPU+dwGZ3rZidEOvBxq95XHetu8DMSDinf+egb7XfpLnXKDpANuu9drSTzx5bQMW+ra/jB5gmX3/Dfwc2As87sky5smz198Yip9DyGwy8CLQAOwB/gco8m2vBP4P8CbQ7PUPWb7tX/f6hlrgM97zP8XbdjGwGmgBqoFv+Y6r8PYNDbR8UtjeCoHf+vrO7wHBI5D7+d7yDO/cH/PWx3rttd77/iu+474F/AX4oyf3647qvvtYiPZmfN99Dz3qvhTttssGfgAsAUYCo4DlwO3e/odSNvXAmd5yCXCKt3wasMv7G/Qa6Rb2KbEdwEpgHJA90A3uGOV8IRA90EMFfAdY5sl2pCfr73rbRgAfAnKAfODPwJO+Y18+2sY0VD9AgfeA/h5YCBT7tl0L9ACf89rVF9GdoHmlupWXt28U+E+v3WZ73y0e6HvsZ5lNAT6AHvSMBF4F7vJtrwRWeB1cCXrweL2vbe8CTgRygYdJVDbnALO8vmS2t+/l3rYKhoayOZb29iTwK082ozw5fuEI5H4+cApQBVzifR9A9423oa2s44CtwAXe9m9513S5t+9R9Z99LcRKelc2LyZ9tx1Y4Fu/GNjsLR9K2dR6++QnnfPXeArL990W4CxveQdwzUA3tD6S8yeAuoNs3wJc5Fu/AKg8wL4nAY2+9ZdJM2Xj3fdM4CGvnUSBp4HR3sO/2bdfjtcey5Ll5e1blXTeaxmGyuZgMutlv8uB1b71SuCTvvUfAfd7yw8Cd/q2TcOnbHo5913Az73lCoaAsjna9uZt7/J39sBVwEsH+I3e5P5t7zfP9X1/ei/t9v8Cv/OWvwW8eqz33F/ZaNVJ62PQCsewHSg/zHNdgXaXVXnB7NO97ycCi0SkyXy83/GfN/k6hioNQOlBYgJj2V++YwFEJEdEfiUi20WkBT36KRKRYEqveJCjlNqglLpWKTUOPaoei+7IAOp8+3V4i3n0znBpY4fkQDITkVEi8icRqfHa2B+B0qTD63zLHeyT51gSZehvx4jI6SLykojUi0gzOmaZfO5Bz1G2t4lAGNjp6+N+hbZwOEy5Xw8sUUq95PtuIjA2qe/8Blq5GY65XfeXslFJ6zvRN2iYgPY/ArSjtbmhLOFESi1XSl2GFvCzwJ+8TdXAt5VSRb5PjlLqsYNcx1BlKToWcPkBtteyv3xrveWvAdOB05VSBcD7vO/F+ztcZHTUKKU2okedJx7N4YdYH5YkyewO9H3P9trYJ9nXvg7FTmC8b31C0vaH0VbAeKVUIXD/EZx7UHIE7a0abdmU+vq4AqXUCd72w5H79cAEEfl50nm3JfWd+Uqpi/yXeXR3t4+BmmfzCHCbiJSKyEjgVrQWBh3gny0is0QkG7jdHCQi2V66b4FSqgedJBDzNj8AfFlEThNNnohcKiK5/Xdb/YNSqhntX/1vEbncs1bCIrJQRH6Elu8tIjJSREq9fY1884FOoElESvDJ12MX2mebNojIDBH5moiM89bHo90Ty/rg9LuAcSKS0QfnGjQcQmb5eAkRIlKODvgfLo8B14rI8SKSw/7tMx/Yq5SKiMg84OPHei/9zdG2N6XUTuAfwE9FpEBEAiIyWUTme7scjtxb0XGx94nInd53K4AWEVnk9bFBETmxr1OxB0rZfButVNahM1KWo7UySqm30QkELwOb0G4eP58CjAvos8DV3nHL0cG0+9BZHO+gNfuwRCn1M+Bm4BZ00kQ1cAM6gPg94A20bNcBq7zvQJvq2ehslWXA35JO/QvgShFpFJFfpvg2BgutaL/1chFpR8vlLbQVeKy8CKwH6kRkTx+cb7BwMJl9Gx2Ebgb+CjxxuCdVSj2PbqMvApu9v36+BHxHRFrRg6jHGHocS3u7Bh3Efxvdz/0FHS6Aw5S7UqoJnUiwUES+q5SKoRO4TkJnou0BfoPOfOszTIaDw+FwOBwpw5WrcTgcDkfKccrG4XA4HCnHKRuHw+FwpBynbBwOh8ORcvq8UGBpaamqqKg4omNisRhvvfWWvqDQvkuKx+MAiIj9GwgE7LZwOAzAtGnTDut3Kisr2bNnz5DJyT8aWQKsWrUK0NUhjOyUUgSDQTM7GBGhtFTP9xo3btwR/8ZQkyUcvTwNnZ2dvP322wDk5uqMeiPftrY2Tj311KM+91CT57HKMpWsXLlyj1Jq5EBfx5GQDvLsc2VTUVHBG2+8cUTHtLS0MHnyZABGjtx3T52dncTjcbKysgAIBALk5Oj5nt3d3XbfF19Mzo7snblz5x7RdQ00hyvLWCxGMKgLACilyMzMBKCnp8fKrrOzk/z8fHp6egAIh8Ncc801APzoRz864msbarKEo2ubft58803mzJkDwOzZswkEAnbAs3jxYpYvXw5g/xeQqPAPxlCT57HKMpWIyPZD7zW4SAd5DooS6JFIxD6QsViMjAw9/y0jI4Pi4mJiMT1vs6WlxVo2FRUVZGdnD8wFDzL8ndujjz7KbbfdBujO8c9//jMAX//611m9ejUvvKDf/nD++efzpS99CYBoNGotysPtHNOFjRs3smvXLgBGjRplFcrtt99Oc3OzbYO/+c1vePVVPSVs8eLFLFq0CMC2ZYcj3RkUyubxxx+noaEB0C4do1zi8TiZmZnWndbZ2Uk0ql+j0NzcTG2trsCycuXKY3JhDCdCoRBjx44F4JZbbuGii3TFib/97W9s27bN7nfvvffSm9nuFI1uT08++SQAtbW1nHXWWQA0NTVRUlICwPTp09m9e7dVNnPmzKG7uxuAgoICay3Onz+fmTNnWpelw5GuuAQBh8PhcKScQWHZ/OY3v2HMGF1xYdSoUdZtEQqFqK6utnGaYDBoYxChUIjdu3cDsGLFirSybPyuru7ublatWkVTUxOgXZKbN28G4K233uK5554DoKioiDFjxvDOO+/Y82zatAmArq4uaw319PQwevRo665MNxYtWsR5551nLZHp06dz4om6PmJlZSV/+MMfADj11FOZNm0aXV365YpPP/00F1xwAQAzZ85k2TJd5uqFF15g2bJlXH65rpk6derUfr0fh2OwMCiUzaZNm2yAtLOz0wax4/E4eXl51j0RjUYpLNTlegoLC22HaNxp6YLf1fX222/z+uuvM336dEBn5p100kkA1NTU0NbWBsCTTz7JySefzJ49ujxXZ2enzahqaGjg3XffBXSMIRwOp53bZ926dYBWGj/84Q+tizEUCnHccbouaUVFBY2NjQB8+tOfZuvWrXR06Arwa9as4fTT9dsuOjo6rPIuLy9nzZo1/OxnPwPgvvvu67d7cjgGE+k5fHU4HA5HvzKgls3OnTsBnYE2atQoAHbv3m0tloyMDKqrq63rLC8vz1o90WjUfm9SfdORxsZGpkyZYi2YkSNH0tLSAsCIESOshfLGG2+wYsUK6xKqr6+ntbUVgOLiYkaMGAHo9PLOzs7+vo0BZ+XKlYBOpHjwwQd56qmnAC3DmTNnAjoz7ZlnngF0ZmRlZaV1+b777ruMHq3fNbVp0ya2bt0KQElJCccffzwXX3xxv96PwzHYGFBlU1enX0hnYjKg4xEmw2fPnj3MnTvXTvhsa2sjL0+/0M8/t8QonXTCKJfW1lbGjBnD008/DcCsWbOIRCJ2PyOv7u5uOjs77byQWCxm3XE5OTn2f9DR0WFdQ+mEmas1adIkTjrpJOuuzcvLswp6+/btNrb4/ve/ny1bttjBz7p166xi37Vrl1U8ZvuOHTsA3abTzUXpcMAAKxsTrA6HwzZ+APtiEjt37mTLli2cfPLJgB4xTpyoX0CZkZFh54ako2VjEgK6urooKyuzI+z6+norS39CRUFBAeFw2FYQGDFihO1Q4/G4TS/v7u6mp6fHBr7TRbbGGqyurmbu3LlWqUQiEYqKigBtRRplPXXqVJqbm62S3rRpk7UUi4qKrNznz5/P448/bmNiDQ0NTtk4+gyllH2mD5bU8+qrr/K+973vgNuTaW9vB0jol48VF7NxOBwOR8oZUMtm48aNgHbjGE0aDAbtqN2Uo3nPe94D6IwfY/V0dXXZ5XScpW1klJGRQVFREcXFxYCWi1lWStnRTiQSITs72464I5GIjc3k5ORYyygajVJUVGRH+v7yQcMZv/Xy3HPP2fvu7OykrKwM0KnPlZWVdnnjxo12kufWrVu57rrrAJ0duWbNGgBeeeUVlixZYi0gYzE6HH2BiOw3EfsrX/kKAFVVVbz3ve8F4F//+heTJk1i/Pjx+53DX0EE4Mc//rGtPHK4pcAOhwFVNmY+SGFhoU1vDofDNpX52muvBeAzn/kMAPfff79198C+Mi3+ci3pglEUGRkZBINBu75nzx7bUQYCgYSGGAqF9qvOYL73z1+C9IuDmXlan/rUp1iyZIkN8O/du9cmsjQ2NtpYWVNTE62trVaeDQ0NNi7z7rvv2riXiTsaZWaUk8NxNMTj8YTCxH62bt3Kaaedxsc//nEATjnlFNs3jhgxgv/8z/+0lTH8mGfezCH705/+ZNu5MQj6AudGczgcDkfKGVDLxrhqsrOzrZbu6emxGTw33ngjAKeddhqgNbmxbILBoB2Zp6NlYzLOTBKAcYM1NjbaUXRDQ4O1GEOhEMFg0LocA4GAlWVBQQGvvPIKACeffDIiYoOO6cC6det45JFHALjqqquIx+O2Bl9hYaHN6PNb4CaRwuBPuAiFQgnp+xdeeKHNvHzppZe4+uqr++fGBgENDQ3WSuzo6KCqqspm9z3wwANcffXVdgJsYWGhdQGDHsX3FvROh2Kx/leB+O/XL4/u7m7q6upsAtWNN97IokWLmD17NqBdvSY8MXPmTF544QUr32984xu2qkU4HGbx4sXce++9dt1UNy8vL++zexpQZWPMt7y8PCtMv4/czNw2lJaW2g6ypKTEFu9Mx3khptPLyclBKWUVd1lZmY3n+N//EwqFEkzwcDhsO1SAv/zlL4CuQDB27NiE9OnhTnt7u1UGDz30EM899xy33347oOXhT2OuqakB4IwzziAQCNj5YSUlJbYUzahRo2ylgSuuuIINGzawdu1aQLs2houy8XeIBjMlwfj67777brZs2QJoOWdkZNjXiezatYv58+dzzz33ALq0j0nhf8973rNfx2oGSsNd0UDiPfqXX3vtNbt8++23U15ezm9/+1tAK+cdO3awYsUKu4/pG5VSXHzxxXZAdN999/Hggw8CkJ+fz549e5gwYQKg27apbm76lb7AudEcDofDkXIG1LIxs9b9I+y2tjYuvPDCXvcvKyuzLrPS0lL27t0LkJA0kC6YrKbi4mKUUjaQl5WVZd2LnZ2dNoANetTpf9OpcQ8B/O///i8AX/va18jIyLABwnTg+OOP54477gBgwYIFjBw5kscffxzQrh3zJtNAIMDDDz8MaKt7y5YtNnngtddesy6K6upqO+cG4KKLLuLcc8+1vzVcMM+d3wIJBoOsWrWKu+66C9CFTD/60Y8COgmjqKjIFoddunQpv/71r8nPzwdg9OjRXHHFFYCeXPtf//VfXHbZZUB6ZpwaNm/ebL0VjzzyiH3Wb7311gSrvL29PaGySiwWs/+jSCRCV1cXH/7whwG47LLLbCHeLVu2MH78eM4//3xAt/lHH30U6Fu5D6iyMZ1dY2OjVTibN2/mpz/9qd3H77edNGmSzfgZOXKk7UjNd+mEMa0LCgro6uqyKbn5+flWEUUiETsJMRAIEAgEEuJbJh1XKWVdlzU1NcyePTutFPi7775rJxgHg0F2795t22MsFrOuiGAwSHV1NQDr169n48aNVtZKKRvDqaqqsgOhE044gdGjR9tJnW+++ab1qQ91DhQrPfXUU62Lu7fsu0996lMJf817lr73ve/ZlPG2tjbuuOMOu23MmDFWpkqphI7UL/v3v//9fXJv/U1XVxff/e53Ae2GNW7s1tZWenp6rBzPPfdcG8NesWIFgUCAgoICQP8/YrGYlVNdXZ0d9HR2dtLV1WXbcl5eni3ee/bZZ1NcXGyPe/LJJ60hsH79+j67xwFVNmYEHolE7EhaKZUw+vOPxk844QTb+PLz86mvrwdICCqmA5FIxCrazMzMBL9qR0eHnfUbCoWssvHXlAOtrMyopaamxqabG8WdbsrGjAZ7enp47LHHuPPOOwHd5kzCRTwetwr64x//OKtXr7bHbdu2jYULFwLa520e3JtuuonVq1fbVOhwOGxHqea8Q5Hu7m4bl8nJybElpgKBADfeeKNVwkuWLEl4/UVPT49tuytWrKCurs52ljNmzOADH/gAoCs0jBs3zqbqvvbaa9YCCofDCUkc8Xjc/obpiIcau3fv5uWXXwYSq3aEQiEKCwttX9fc3GzjhLm5uWzbts2W89qxYwdNTU1Wofj7CXNe83+aO3cur7/+OgD33HMPgUCAE044AUiM9U6ZMqXP7tHFbBwOh8ORcgbUspk1axYAy5cvt2bj1KlTrUsHEv3BF110Eb/85S8BPYI3vsp0myjnH60UFBQkvBAtOzvbjoxisZi1GIPBYIJL0j8yLC8vtxlXxt1j3HT+gqfDlZUrV9o21NDQwKZNm2ym5IsvvmjdDW1tbQkp4u+8844dUTc0NNjaU0uXLrVW44QJE1i9erVNId2zZ48dpQ5lyyYYDNpntqqqylrEgUCAWbNm2Qwp2BdfzMjIIDc3147MP/KRjzBp0iRbh643vvCFLwA6K8r8T0y7Ndlw/jT9oSrT4uJiG9errq622Yytra3U1tbaLLLKykq7vG3bNtrb261cAoEAhYWF1vqeNWuWPWdDQwNPPPEE//jHP/b77dbW1oTiu7m5ubb99mXsdkCVjQkc/u53v7MCa2lpseb5ggULEhrSjBkzbLmFQCBgt/mDsemCURo5OTmsWrXKfp+dnZ0QYzBuNKMw/A3TL1sTPzNBQ+NGi0ajw17ZnHHGGbYk0ltvvWV92KDn4Jg083g8bmUWi8XIycmxiiMWi9lOsKenxz6seXl5tLS02IFVa2ur7WyHMsFgkIsuuqjffs+42oYr2dnZfPrTnwZIUL6xWIxIJGLnKu3evZvnn38e0BVWZs+ebeMrhwrmX3rppfztb38DYM6cObYPCQaD5OXl2bbd3t5uE1/6sgK8c6M5HA6HI+UMqGVjRszhcDjB3WNq9CxYsCChQFxpaal1nW3fvt0ek251vHp6eqzlISI2GA06ccLMGu7u7rYut4yMjIQUc389tXA4bEdHJpHAjHrSoZLAmjVrbCB0zZo1lJeX25FdTU2NHWm2trZSVVUF6GDstm3brPuoo6PDVnGoqqqy8pw2bRrd3d02fXr79u3WRWLcIQ6HcXODLpppntVwOExRUZGtutDR0cENN9wA6PT77u5u+6p3f+aZ+Wue31AoRHl5uXWxv/baa7ZKQE9Pj81kM79h+lbTjvuCAVU2hra2NiugrKyshBmwyRg/8cqVK23HmG4VBLq7u23DDIVCCfdfWFhoFXIgELCNpqurK6Ewp19hFRQU2I7PdKZGyadDVtqzzz5rH8pf/OIXXHDBBbYwZyAQ4JRTTgG0L33evHmAzlKLx+NWbtFo1D68e/futW64+vp6br75ZuuerKmp4Rvf+AYAFRUV/XODjiGBCRH4KzNv3ryZzs5OG0ttamqyA8FNmzbR1dVlXYzhcBgRsS7xkpIS20cqpairq7NFek1Gn9lmBkCgB6wmhmmqPfQFzo3mcDgcjpQzKCybs846y87MLikpOWigy4wGGxsbbZaLPzsrHUguRLhz505bl0tEEpIBjIViXi/gd4v5M/1mzpwJ7Cspnk6WzU9+8hPOOOMMQFvZkydPtllmPT091k1bVFRkMyXLy8uJx+N2flJLS4v9n4wfP95a4N3d3Vx33XWcffbZgJanWXY4DkXyPBeTaDIUGRTK5oYbbrCFIAOBgH3Qt27dul8xTjOxq7W11XaE6TapM1nZVFVV2ZiAUipBCRsXmynC6Y/1+N1vxvSOxWIJ6c7+OM9wZevWrQklPqZPn86//vUvAJ544gmb7VdbW8tDDz0E6MFOdXU1GzZsALR71yieNWvW2Bn0CxYsoL6+3sZzuru793s5oMORDgwKZVNeXm7z49va2myq6YoVK/ZTNsbqiUajtlM1+6cT/vL2nZ2ddgTkf/WC38oRkQQ5Jaczm6oDnZ2ddHR0WMsmHWTb3t5uU5jr6+uZO3eujdNMnTrVWiJr1661SuljH/sY69evt/vFYjH70qq5c+fapI0LL7yQ9evX29hZe3t72sUYHQ5wMRuHw+Fw9AMDatn434dhaiI9/vjj1np56qmn+NjHPpZwjHH31NbW2uPTIa7gJxKJJFgmlZWVnHnmmYCeVWzSdrOzs62L0dSk8k889FtHpmZSc3MzsVgsIeV8uNPa2moLbG7evJmcnBz+/ve/A4mTNevq6hLq9uXk5Fgf+tatW611PmrUKOs227lzJ3l5eTbLr7W1Na3eFeRwGAa0R/G/ddPMRv7LX/5iO77eqjmbVNPu7m7bkfrnmaQDyWXEI5EIc+fOBbQCN8raXwE2Ly+PeDxu5+C0trbaBIFIJGLdQWVlZVRXV9sSLX6FNFyZNWuWrSDwzjvvEA6HbXHTjIwMmpubAV2GprS0FNAv+mpra7Nu3uXLl9sBU3V1ta3CPW3aNObPn8/bb78N6DTzvkwndTiGCs6N5nA4HI6UM6CWjT/11gRhy8vLbbZOXV0da9eutZPlYF+NpI6ODlv3a6gW3ztaRMRmo9XW1tLd3c2VV155ROdInhlsLKO2tjZefPFF6x4yltBwZsKECTb7rKqqikAgwJtvvgnA2LFjbX2oysrKhKKv0Wg0Yba2mcHd0dFh3XJKKTIzM61brby8PO2yJx0OGGBl09u7xCdMmGBfoBQOh/nnP/+ZoGySSzIA9kFOF7Zv325dO01NTdx66619du6vfvWrTJo0yVYhiMfjw75znDVrFnfffTeArV5xzTXXALBs2TIbH2tra7NKesuWLYTDYauIOjo67ODJ7+KdMWMGb775plVeFRUVvbZ7h2O449xoDofD4Ug5gy7l6Jvf/KadpR0Oh5k/f37CdvNagtGjR1v32Xnnnde/FznA5OXl2cB9QUEB55xzTsJ2f5bfkfKhD32IjIyMtKrKEAqF+OAHPwhg254pfGj+AnzmM5+xNdN6enoYO3asrWgxZswYm6lWUVHBpZdeao879dRTrdUzfvx4Z9k40hLp66q+IlIPbO/Tk/YdE5VSQ2batpNl3+Lk2Xc4WfYt6SDPPlc2DofD4XAk42I2DofD4Ug5Ttk4HA6HI+U4ZeNwOByOlOOUjcPhcDhSjlM2DofD4Ug5Ttk4HA6HI+U4ZeNwOByOlOOUjcPhcDhSjlM2DofD4Ug5Ttk4HA6HI+U4ZeNwOByOlOOUjcPhcDhSjlM2DofD4Ug5Ttk4ABARJSJTDmO/Cm/fQfcupMGCk6XDsT/9rmxE5OMi8oaItInIThF5XkTOPsZzviwi1/XVNQ4mRORsEVkiIs0isldE/i0ipw30dQ1FnCxTh4hUikiniLSKSJMn5+tFxA1o+4Dh0G/2a0MQkZuBu4AfAKOBCcC9wH/053UMFUSkAHgWuBsoAcqBbwNdA3ldQxEny37hUqVUPjARuBNYBPy2tx1FJNifFzaUGTb9plKqXz5AIdAGfPgA2zPRAq31PncBmd62YnRHUQ80esvjvG3fB2JAxDv/Pf11T/0gs7lA0wG2TQZeBBqAPcD/AEW+7ZXA/wHeBJqBR4Es3/avAzs9WX8GUMAUb9vFwGqgBagGvuU7rsLbNzTQ8nGyHDwfT0bnJ303D4gDJwIPAfcBzwHtwPneM/8ToArYBdwPZHvHlnrPeROwF3gNCHjbFgE1QCuwCThvoO8/hXIdNv1mfwrtQiB6oAcL+A6wDBgFjASWAN/1to0APgTkAPnAn4Enfce+DFw30A0jBTIr8DrA3wMLgWLftinAB7zGNhJ4FbjLt70SWAGMRY/kNwDX+/4Xu7xOIBd4OKmDPAeYhbZ8Z3v7Xu5tG5IdpJNlyuVbSZKy8b6vAr6IVjbNwFmeLLLQHePTnkzzgWeAO7zj7kArn7D3eS8gwHS00h7rk+Hkgb7/FMp12PSb/Sm0TwB1B9m+BbjIt34BUHmAfU8CGgdKaP3c2GZ6D+oOr9E9DYzuZb/LgdW+9Urgk771HwH3e8sPAnf6tk3zd5C9nPsu4Ofe8pDtIJ0sUyrbSnpXNsuAb3py/3++7wVt4Uz2fXcGsM1b/g7wVLIc0QOD3WjLKDzQ990Pch02/WZ/xmwagNKDZN6MBbb71rd73yEiOSLyKxHZLiIt6JFnUTr4fZVSG5RS1yqlxqFHz2OBu0RklIj8SURqPJn8Ee168FPnW+4A8rzlsejRocEvd0TkdBF5SUTqRaQZuL6Xcw85nCwHhHK0GwwS5TQSPeJe6SUUNAF/874H+DGwGfiHiGwVkf8CUEptBm4EvgXs9v5vY1N/GwPGsOk3+1PZLEX7By8/wPZadGDRMMH7DuBraPP5dKVUAfA+73vx/qq+vdTBiVJqI3qEeCLazaCA2Z5MPsk+eRyKncB43/qEpO0Po0f945VShWh3xuGee0jgZJl6vEy/cmCx95X/Od0DdAInKKWKvE+hUioPQCnVqpT6mlLqOOBS4GYROc/b9rBS6mx0f6GAH/bTLQ0Ew6bf7Ddlo5RqBm4D/ltELve0blhEForIj4BHgFtEZKSIlHr7/tE7PB/dMJtEpAS4Pen0u4Dj+udO+g8RmSEiXxORcd76eOAqtGsiHx3YaxKRcnSQ+nB5DLhWRI4XkRz2l2c+sFcpFRGRecDHj/VeBhony/5DRApE5BLgT8AflVLrkvdRSsWBXwM/F5FR3nHlInKBt3yJiEwREUEnV8SAmIhMF5H3i0gmuhPu9LYNS4ZVvzlAPiEvHHcAACAASURBVMg30P7aOuCvwJnogOEv0SPFnd5ylnfMWLR/sQ14B/gCPl832tf7Djrj4pf9fU8plFU5ujOr8eRVA/wKHew+AVjpyWQNehSzw3dsJT4fOtrt8Eff+n958u8tg+pKtDneis5gucccyxCNMzhZply+leiOrRWdCLAU+DIQ9LY/BHwv6ZgsdDrvVrRC2QB8xdt2k3fOdnSM7Vbv+9noZI1WtHvuWbxkgeH8YRj0m+L9qMPhcDgcKcPN7nU4HA5HynHKxuFwOBwpxykbh8PhcKQcp2wcDofDkXL6vLR5aWmpqqioOKJjWltbqa+vB0BE6OzsBKCrqwsRIRDQOjE3N9cuBwIBysvLAQiFDu82Kisr2bNnz5CZ43A0suwvhposwcmzLzlaWSqlaGtrAyA/P/+A+7W0tFBQUHBU17Zy5co9SqmRh95z8HAk8jRJXTorHFauXJmw3tu+BQUFTJ06NeH73vbvjb6SZ58rm4qKCt54440jOubll1/m3nvvBSAzM5N163Ra/pYtWwgGg+Tk5ADwnve8h7w8PXE7KyuLO++8E4CSkpLD+p25c+ce0XUNNEcjy/5iqMkSnDz7kqOVZSQSYdmyZQCcc845wP6dJ8Df//53LrjggqO6NhHZfui9BhcHkmeyUlBKEY1GAQiHw8RiMTvYzsjISNjXP3A/88wzef755+22aDR62IP0vpLngL20adOmTfzwh3ri7zvvvMPs2bMB2LBhA9nZ2QCUlpayZ88eTjzxRAAaGxutgDIzM7nxxhsBmDJlCtdffz2jRo3q79twOBxHQFZWFr/5zW8AKCoq4qSTTkroIJ966ikAfvGLXxy1shlOGGUTj8cB7dEJh8N2+w033EBmZiYAY8aMISMjg0gkAkB3d7e1HtesWZNw3lAoRCym58IGg/1TvabflE0sFrM3dd9997Fs2TJyc3MBmDdvnrVYIpEIGzduBCA7O5tRo0ZZobz++ut89rOfBaC4uJiWlhYAdu7cyRe+8AXuv/9+AEaPHp3wz3E4HIODnp4eXnvtNUA/z7Nnz+bTn/40AN/5zndsR2kGmOlOIBCgp6cnQcE899xzAPzkJz9hy5Yt1rMjIpSXl1Nbq6vVxGIxq8iVUowZM4avf10Xx7jxxhv7TckYXE/scDgcjpTTb5aNX4uuW7eOsrIy+10oFKKxsRGAyy67jLfffhvQFstPf/pTvvOd7wCwYMECe0wkErGxnIKCAuLxOA8//DAAN910k7NoHI5BSDgcpqysDNBxg40bN/LlL38Z0C624uJiAEaOHFLx/ZQRj8cTrJqrrrqKxx57DIC8vDxycnKs9dLW1sbOnTvtvp2dnTYkEYvF6Orq4pvf/CYAP/7xj7n77rsBuPLKK48ohnO09GvMxiiUSCTCyJEj7Xo0GrW+xfr6ehs43LVrF4899hiTJk0CYMaMGbS3twPaH9nT0wNod1tZWRk7duwAEl12DodjcGE6wJqaGvLz8ykqKgJ0HNa40YyL3aF56aWXAHjyySeZOFEXee7p6bHJAqD7xMrKSo4//nhAZ/M2NTUBWpFnZWVZufb09PCZz3wGgJNOOokpU6b0mqjRl7jhv8PhcDhSTr9aNtu2bbPLkUiErq4uQLvYTIJAVVWVDfyPGTOGSZMmUVen31tVWVlpLaDRo0dbDRyLxWhtbbWjoubm5sNOh3Y4HP2LGXlv2bIlwUUUDoftM2zm0KV6tD3YMeGAX/3qV4DuK401E4vFUErZZKhwOEw4HLYJApmZmQnyS06bNue+6aabeOaZZ1Iu435VNjU1NYBWNHV1ddZ329LSwoYNGwBoamqyfsfs7GyamppYvXo1oFOhZ8yYAUB1dbXNUmtra7PnAti4cSNnnnlm/9yUw+E4LEwar3HlhEKhhHkko0ePpqGhwe7r0CilWLxYv38uJyfHhg+MAjHrmZmZBINBq3za29uty9L3qgJAhy7MpNlXX32VdevWMWvWrJTex4Aom8zMTNrb262WHTFiBNu363lDjY2NZGVl2f1GjRrFzJkzAa2NzbZIJMK0adMAeOGFF8jLy6O0VL9td/369U7ZHADT4Hbu3MnYsfptuu3t7fzsZz8DdN5+bm4uGRkZ9pj+zsd3DE+MUtm8eTOwb9RuPBytra2MGDECwPYH6WrR+Hn00UfZu1e/WdskQ4GWTWFhIR0dHYCOw8RiMavM4/G4lW1WVpZVTgazrJTipz/9KQ899FBK78PFbBwOh8ORcvrVsjH+2La2NjZv3mxLKVRUVNgRTTgctqZ0Y2MjHR0dtLa2AnDcccdZH28wGKS5uRmApUuXcuKJJ7JgwQJg38jJkejz3rp1q626cP3117Nq1SoAvvrVr/Loo48C8Ne//pWHH36YSy65BNAWkEkx//znP2//T+nIvffey1tvvWWX/RxJral0x2RWTZgwgXA4bEfqsM+SMRO7HbBkyRLrVTAuM9DlaTo7O+134XCYaDRqs/tg3/Mfi8UIBAIJ/YHxLAWDQTvRNpX0q7Ixgf/29nba2tpsSnNbWxuTJ08GtOtsxYoVgE6DPv74423hvp6eHqugcnJy7PG//e1v+eY3v2nNSZMe7Uh0Qxx33HE8/fTTdv2JJ54A4AMf+ADr168HtEtj/PjxvPLKKwDWbQmHX/B0MGPaj/Flm+/8bkNIdBk+++yzANTW1tqSSNdccw3f//73GT9+PJAoZ+N2TD6PA9599107h8aUWSksLAS0DI0c/fNF0p1Vq1ZZl6NSyrZVESESidhnNBqNIiJWdiKS0K67u7vtejQatYonMzPTDihTiXOjORwOhyPl9OtQtbKyEtiXNfGJT3wCgDvvvNO6xwKBgLWAGhoa2L17N2vXrgVg9uzZCZrZuNcqKirIycmxFpDLZOmdF198kS1btgDahWECgjNnzuTJJ58E9GQ6/+jo7LPPtsc888wzfPKTnwSGroyvueYaQCdCzJ8/H0i0cnrDuMzmzZtn29+4ceN49NFHraVzxRVX2LT8YDBorZve5JTO7rZVq1bR3d0NaDn4635FIhE7gjcTtB37qt8DCanOgUCAUChk3WFKKUKhkJXh/2/vzKOjrPK8//3VXpWqbGQlsgQBEREQRUUdHVB71NbGUbsdG23cug8q43E5vr59xu5xadeeM+/0tMP0vPPa7mK3rQguaOsoNNiCG4iyyBICBEKWgkpSSVVqu+8ft+6P+xRJQEkllcr9nMMhVfXUk+e5uc/97b+bWfRps9ksr9UcdTgcvHZmkwEVNmoBKysrQygUYpfGhAkTeBC2bNnCk7GoqAj19fWcN3722Wezyb1r1y5+uOvq6tDR0cHmZDgcZpfaQJiH2SQzTx6QWSaZ7hk1fvF43PKZWhwfffRR1NXV8RhVVVVx7v7MmTN5nObMmYPS0lJOtWxpaeFswFdffZWFzVBcMFOpFC9iy5Yt4zkyZcoUrsvy+XxIpVLYvXs3AODpp5/mtPqysjK88cYbAIC5c+ciFApxU8QtW7Zg3LhxAKRbUlV5Z5JMJi2LxXBzs61du5YXQ1UnoruI1Lyqrq7G9u3bMX78+EG71lyhqamJM217EiBqzFQcRs9WU2Or2t7oadM69fX1rOR/132EjoRxoxkMBoMh6wyYZROLxdhisdls8Pl8rE2Hw2Hu4TNmzBj+ubm5GeFwGKeccgoAaWYrc2/MmDEsif1+P0pLS9Ha2gpAau2q64DSNocqmZshKXT3DBFx8D4ziK9cZfX19Tj55JM5eWLEiBGorq4GIF0Wt956KwCpRU2aNAkXXHABAKnlqB5Kzc3NeOGFF/rz9gaUSCTCQenOzk68+OKLAKzuWZfLhe3bt/MGfrFYDH/zN38DQLqA1B4rPp8PLpcLF110EQA5Nlu3bgUgsyOVNXjSSSfhtNNO46C43W4fdtaMzsaNG1nbdrlcCIfDPK9VgBuQGnwwGDSWDeSzruZMLBazdE7RkyoAacEoK6irq4utd73YU31Xfw3IPcYA6enIBgMmbLZv384PejweR1tbGy92ut/R6/VySnMwGMTs2bP5IVbCBJAPu/oDqEaeyq0WDAY5njPU6cnn39Nipcbvd7/7naXjwvXXXw9Ausdeeukl7qgdj8ctha//8R//AUC2rli3bh2b0meffTZGjx4NQMZ5cnWny6MhmUxycZzD4eB5tmTJEu42HI/HEQgEMGvWLADAxIkTeXGcMmUKz8Guri6Ulpby+Xw+n2WclCK0atUqfPrpp6xYFRcXs4utoqKCO2IMF+rr6y1xV73bsFJG1Wfbtm3DGWecMSjXmSuoQnh9X5q+0GM6iUSC3WaZXfDj8Tj/HdQ5VTuxIS9sQqGQRdhMnTqVfeENDQ3cG023cogIVVVV2LZtG39PDUx7ezsvsOXl5bDZbBwD8vv9vJAMdXqKjehdrV9//XU0NDSwgAmHw5g/fz4AYOXKlaxh19XVoaWlhWudMnc1Vb+nubkZyWSSNaJnnnmG65f8fj8vqPrCMFSw2Wysvd1www1Qe74fOHCAx6W4uBgej4dfb9iwgb+vWroD8v7379/PD2xhYSGPSXt7O2uXKhakztfc3MwxSJ/Ph1/96lcAwHM+39m9ezdOOOEEADgsfuBwOCzxLGVdDmfUfFWkUqk+t0+x2+1cp2i32zlGm0qlLN9NJBI8d9WYZzvd3MRsDAaDwZB1BsyyaW5utrjKqqqqWLOJRqOorKwEIIsKlVldWVmJDz74gF0/48aNY3dHNBrllFW73Q6Xy2Xx9yorZ6ijm81KA9HdaOvXr0c0GuX00XvuuYdjXAUFBdzgtLy8HOvWrePzvfDCC1iwYMFhvy8ej2PXrl3cd27q1KlYsmQJAOC6667D9OnTARzS1IcSoVCIXbf79u1jV9e4cePYYkskEti3bx/3lNILNEOhEFvMTqcTFRUVFstG4fP5eD4nk0nEYjHWMD0eD//effv28ZxtamrKzk3nEMlk0pLerCxBPXtK7wSv4q7Dmbq6Ostr1bwUOJRtltkZW3mQ9LiMyvRTY69nsaljWlpasnovAyZsWltbOaYSj8dRW1vLC2E4HOZJVlVVhT179gCQAd3S0lIWKgUFBfxzIpHgQVXnVK+FEENyMewJfbFTQri9vZ1rX3bt2oWTTz6ZBfK9997LO/m1t7dzhfuIESPw4Ycfsj+2ubkZH3zwAQAZz1FMmzYNTU1NuPrqqwEAl112GS6++GIAwI9//GOOhWUGF4cC3d3dvLf9lClTuPVMQ0ODxbWl31sqleJFUQ/Out1utLS08Jzzer2WdvkqtpNKpdDR0cFuso6ODnYZR6NRdhEPRbfkt0U111SuyM7OTku7Gr0zscfj4fTz4Uxzc7PlNRH12RhXj9noqeTqe2q+2mw2S5sbABx/zBbGjWYwGAyGrDNglk0kEmFXQiQSQVlZGUvtoqIi1vZCoRBr8J2dnaiqqmKJq/bBAWQgV884U5ktgLQA8kVT7KkfmRACS5cuBSADiNFoFOvXrwcAfP311xwgbGlp4V5od9xxB1asWIEHHngAALB//3489NBDAKRlo9xDKnFAd2Go5p0AOBFB75k2VLDZbFizZg0AWFxbsViMEyIKCwtRVlbGKfaZfc70FHObzWbpPaU0RL/fz3O7q6sL7e3tbGnH43E+RyKR4PfVdg/5jGquqVe4u1yuw4o8ATm+KhNrOKM8GGqM7HY7hwh0S1qRSqV4LgWDQZ5fqjxCrYslJSW8TjidTjgcjvxxowGHsk+UYFDNH202Gw9mKBRi06+kpMTSzsLr9bIZaLfbeeD2799vqadxOBy8eAxlOjs7ObMsHA7zIqXaVABAIBBAc3Mzd3ptbGzkBXX58uXsngSki1LP0lOT7YwzzuAJfOGFF6KkpAQvv/wyANkResKECQCAGTNmsCtkKLarGT16NLsE9bosvUFhV1cXDhw4wC7fRCLBc1PPlopEIpZGh7FYzHKc/nNpaSn/fTweD2eonXDCCbjwwgsBAKeddlp2bz4HyBQeSjnU3T56hlq+lC8cC62trXA4HDwuqVSKn319Pxr1v81m46wy3R2s1gz1/M+ePRtvvfUWAPl30LvtZwvjRjMYDAZD1hkwy4aILG6GzZs3c1HhpEmT2G1jt9vZnHM4HEgmk+zKUMWggLXVdiqVsvQE83g8lv5BQxWv14ubb74ZgHSJHTx4EIDUqpUlEo1GEYlE+N7vu+8+1mgKCwt5/5l169ahuLgYd999NwCZnabqnNra2vDwww8DkMHy6upq1paqq6stCRqqCHEoZgrZ7XY88sgjg30Zw5aOjo7DtPTMXl6KzKaRw5WOjg44nU721IwZM4at7rVr16Kmpoa9F3oyQCaqxkZvuKkye4PBIK+12WTAhI3qSArIwSgtLcUtt9wCQKb3qY28ysvLuZhr06ZNKC0t5UGoqqpigbVv3z7u4HvmmWeira3NUgTWV+HTUMFms3GrlGyzfPnyb3X8cHD7GPqXvXv3WrLPVLsVhe5OV1saZ2ZMDTc6Ojrg9Xo5bj19+nReR9esWXPYpn1CCIuQ1gWQ3sy3pKSEyxvef/99lJWVZT3DdEAtG0UymcQ555zDr8eNG2eJuajW74B1H+2+WsGXl5cf1iPIYDDkDu3t7XC73ZZ4n91uP6xuBDikLKpFVtUtDTeSyaRF0M6ePZtj3cDhSjURseXT1dXVq3U4YsQI7nLx/vvvW+p1ssXQV/8NBoPBkPMMmLBxu92WDqW6tNZ9hZnS1Wazwev19mjV6EVggUCAO+qqQrx8SX82GPKBcDh8mDtMPcOqs7HT6eRj4vE4QqHQsOkb1xNut9uyPs6dOxfxeJzdi/F4nPueAdKjo8ZTX/+EEJbMVJfLhfPPPx/nn38+HA4HiAiFhYVZ28sGGOAOAmqA9HqFTHS/4pE26NLbtwQCAR7MQCAwbH28BkOuEo1GUVBQwIunaqeiXD1qB19AppLX1tbmTSeQ74pKglJ1iGVlZbxNCBFZBI1CpYzbbDYe68ytCAoLC7mMRCVpZDtBwLjRDAaDwZB1Bsyy0QNdiUSCGyL2RKZF09PWyEqqA9Ky8Xq9lqJRFSQzGAy5wUcffWR5LpV7XGnvTqfTsm9LNBrlFvvTpk0b+AvOAQoKChAOhy0WnlpH3W63JYPPbrdb1kXdmlFFnaprRnt7OzeEVedSZRLZYsCEjc1mY/MuFApZTLZUKtXn7oW97Vapo+eJO51OFBQU9MdlGwyGfmLBggV49NFHOZbQ0dGBxsZG7qigb+gVCATQ1dXFtSDDlbfffhutra2WLvbbt2+3HKO7JTNLTPQNJvV4+IYNG/CLX/wCwMB1AzFuNIPBYDBknQGzbG644QZ8/vnnAKRlc+qppx66iF6SBY6EnmNeXV1t2WZa9aIyGAy5wYMPPmjZDiMSiWDixIm8R1JXVxdvP/DNN9/gmmuuGbRrzSVUPYxCWX8ej+ew7D0hBLvK9Mam6rVyYw7GduTU3yYUEbUA2NWvJ+0/xgghygf7Io4WM5b9ixnP/sOMZf8yHMaz34WNwWAwGAyZmJiNwWAwGLKOETYGg8FgyDpG2BgMBoMh6xhhYzAYDIasY4SNwWAwGLKOETYGg8FgyDpG2BgMBoMh6xhhYzAYDIasY4SNwWAwGLKOETYGg8FgyDpG2BgMBoMh6xhhYzAYDIasY4SNwWAwGLKOETZ5ABGNJSJBRI706xVEdPNgX1c+QETXE9HqPj5fTkTzB/KaDMMLIlpNRNf38tk4IgoP8CV9J45Z2BBRWPuXIqKI9npef1zkcIKI6rUxbCKip4nIP9jXle8Q0TlE9FciaiOiA0T0ERHNPNL3hBAXCyGe7eO8fQqrfCZjLh8koreIaNRgX9dAMFDrohCiTgjR5/rQm7AionOJ6C9E5Egrq2P767p64piFjRDCr/4B2A3gMu29FzOPV9r3YJIL13AELkuP5wwAMwHcN8jXc0SIyD7Y1/BdIaJCAG8C+C2AUgA1AB4A0H2M5831eTYQqLlcDaAJcozznm+7LmYDIrIRUV9r/CUA3h6IawEGwI1GRL8ioj8Q0WIi6gBwLRF5iOjfiaiRiPYS0b8SkSt9/M1EtEL7vkXqEtGlRLSZiDqIqIGI7tSO/QERfUlEobQ0n6J91kBE9xDRVwC6sn3f/YEQYi+A5QCmpLXEC9RnRHQ/Eb1wpHOkJ9x9RLSLiJqJ6DkiKkp/9g4RLcw4/ksiuiL98yQiei+t6X9DRD/SjnuGiP6TiN4mok4As/vptgeDiQAghFgshEgKISJCiD8LITaoA4joX9La+U4iulh7n12WaSvmIyL6P0R0AMAfAPwOwKy0Rhsa4PvKGYQQUQB/AjAZAIjo+0S0jojaiWgPEd2vH09EP0nP2SAR/SJz/ucbROQjopfS9xsiok+ISN8PujZteXekn9vS9PfGE5HQzrOaiB4ioo8BdAJYDGAWgN+l5+C/aedUwuYv6dcb08dcmT7XAiLanr6m14moOv2+WpP/Mf08tBLRY0cQbAMWs/l7AC8BKIJ8AH8J4DQAUwGcAuBsAD8/ynM9DeAmIUQg/f2VAEDS5fHfAG4GMALA7wEsVUIszT8AuDh9HTkPSZfDJQDWHcNprk//mw1gHAA/gCfTn70EgDd6J6LJAMYAeIuICgC8lz6mIn3cIiI6STv3jwE8DCAAYCi7irYCSBLRs0R0MRGVZHx+BoBvAJQBeALAU0REvZzrDAB1kGN2LYAFAD5Oa7TF2bn83IeIfACuBrAm/VYngJ8AKAbwfQC3ENHl6WMnA1gEYB6kRVQEaW3mMzcA8AE4DnL9uhVAVPv8xwDmA6gEUADgrj7OdR2AGwEUQo7hxwAWpOfgHQBARMcBKE4rVOemv3dS+phXieh7AB4EcBXk2O8DkGmRzYX0vpyWPu4nfd3gQAmb1UKIN4QQKSFEBHIA7hdCtAghmiFv6rqjPFccwGQiCgghDgghvki//zMAi4QQn6a109+n39f97r8RQjSkryGXeT2tBa+GFKaPHMO55gH417RvNwwp1P+BpItnCYDpRDRGO/Y1IUQ3gEsB1AshnhZCJNLj/CrkpFIsFUJ8lP676g/GkEII0Q7gHAACUmFpIaJlRFSZPmSXEOK/hRBJAM9CLoCVPZ8N+4QQv02PWa7Ps4FAzeV2ABcC+DUACCFWCCG+Ss+dDZAa+Hnp71wF4A0hxGohRAxSOc33/evjkMrM+PT69Vn6eVU8JYTYJoToAvAKgOl9nOv3QojNQoi4ECLRyzHfh/Sa9MY8AP9PCLE+/Wz/bwDnpYWU4jEhxEEhRD2Af4emuPbEQAmbPRmvqwHs0l7vwtFrLn8P4AcAdqddGGek3x8D4N60CRpKT/DqjPNmXkeucrkQolgIMUYIcesxLlojcfhYOwBUCiE6ALwFafEh/b/SXsYAOCNjPOcBqNLONVTG84ikH87rhRDHAZgCOW7K5bBfO065YHsLyubNmPQTl6ctOjeAhQBWElEVEZ1BRB8SUQsRtUFagMptNBLaOKbHPDjQF54tiMhO1gSCkQCeAfA+gD+SDC08RtaY337t5y70Pv+Ao5uDR4rXWNaNtEJ2EL2vp7vS3+mVgRI2mVpJI+RiphgNYG/6505Ic1KhL24QQqwVQvwA0k3xJoCX0x/tAfBAepFW/3xCiD/2cR1DiT7HpQ/24fCxTkAGawGpUV5DRLMAeAF8mH5/D4CVGePpF0Lcop1rKI9nrwghtkA+/FOOcGiPXz/C62FJWlt/DUAS0op8CcAyAKOEEEWQsS3lmmyEdCcBAIjIC+laygvSY+HX/u0TQsSEEPcLIU6EHJ+/h1TuvtOv6Os1EbkhQxfv93I8kLFuEFEAQAkOrdMAoGcWjk5/p1cGq85mMYBfElEZEZUD+AUAFez+EsBUIjo5Pcn+WX2JiLxE9GMiKhRCxAF0QE5eAPi/AG4jopkk8RPRZenYQz6wHtL95SQi5SM9GhYDuJOIakmmUD8C4A+aef025KR6MP1+Kv3+mwAmEtF16d/pTI/tif13S7kByUSIu5WLIB0ruwaH4gvHQhOA4zJih8OO9DM5F3LB2gwZ5zsghIgS0emQMQnFnwBcRkRnpcftARwSRHkJEc0hoinpIHs7pFsteYSvHS1NkPFaxXkAvhBCdAJS+EFajvoxiwHcRERT08LpUQCrhBAN2jH/i4iKiWg0gNsh4/G9MljC5gFIofIVgA0A1kLeDIQQmyAXxBWQQdm/ZHx3PoBdRNQO4CakYz1CiLUAbgHwn5Dm3lbIAG2+8AsAx0Pe2wOQmuHR8HsAz0OO407IoOM/qg/T8ZnXAFygnzPtYvsepGttH6QZ/zikOyTf6IAM7K8lmVm3BsDXAO7uh3N/AGAjgP1E1NoP5xtqvEGy6LAdMplkvhBiI2QA/EGSGaq/BMAeiPTn/wjptWiE/Ps04xhT0XOckZDPYTvkfHkfcsHvD/4N0nsRIqJ/Rc8utH8G8FL6mCuEEO9AKqBLIP8Go3G4pfUGpBK8Ln3cM31dBAlhrHyDwZC7pC3yEIAJQoidg309Qx0i2grgUiHE1u/4fQek5VWbTg44Kky7GoPBkHOkXeC+tBv8XyC9IPWDe1VDHyLyQGa2fSdBcywYYWMwGHKRuZDu230AJgD4B2HcMMeMECIqhHh8MH63caMZDAaDIesYy8ZgMBgMWaffGwWWlZWJsWPHfqvv7N+/H/v3y5olp9OJWCwGALDZbBBCIJlM8mu7XfZ7FEIgEAgAAMaNG9fDWQ+nvr4era2tQyaF8tuMZSQi6z7r6+sRj8cBAA6HAyNGyPKEjo4OtLW18evu7kOJPW63m1+Xl5ejtLT0iL9vqI0l8N3mJgBs2bIFgBynjo4OAIDqVqPGWgiBwsJC/qymRta+eb1eCCH4+N4YauP5XcdyIPj8889bhRDlg30d34YjjafyQDU3N6O9vR2AfIZdLheiUdm8I5VKwW63W+amx+MBINfOWCyGDlmHKgAAGKJJREFUggJZCVJSUoKSksyuTD3TX+PZ78Jm7Nix+Oyzz77Vd5544gk8/rh0I1ZXV2PXLlm46vf7EY1GEQqF+LV6oOPxOP72b/8WAPDyyy8fftIeOO20077VdQ0232Ysv/zySwDAz372M+zZIwt7KysrMW+ezFZcuXIl3nzzTfzgBz8AAGzbto0F99ixY1FfXw8AuPnmm3HNNdfwZ70x1MYS6Hs81cOcSqVARLDZDhn955xzDgBg9OjRWL1atoBzOBwQQqCpSdbGRiIRnH322QCkwvTggw8CAKZNm4Z4PM7jqZ9XZ6iN53d5zgcKItp15KNyiyONp1JqnnzySbzzzjsAgF27dmHkyJGsDEWjUZSUlMDhkMt6Y2MjTjxRlsX5fD7U19fjzDPPBABcfvnluPrqq4/q2vprPHOiBbrD4cD3vvc9AMCePXvg98tODG1tbYhGoygrk10sampqcMYZsjvNzp07MWPGjMG54Bxi2bJlWLFiBSorZauu008/na2Xrq4uFkLnnHMO5syZw9agw+FAOCxbL5WWlqK6uhoA8O677+Ivf/kLpkyRxfO33377gN7PYKG0wUwh29nZiU8//RSAtFIuueQSAMBHH32EhoYGHie3242LL5bNoFevXs3Ce9q0aXA6nQNxC4Y85YsvvsBDDz0EAAgGgyxMRo8eDSLCSSfJ3rjhcBg+n4/nW1VVFVs2iUQCkyZNQmurLPVatGgRHn74YQDAqlWrUFSU/d7EOSFsDh48yDfb1taGri7ZfurAgQOora1FW1sbAKk9qs9OPvlk+Hy+nk84DHjllVcAyIlYWVnJ5rHX68XMmbL3aHl5OZvYyWQSsVgMzc3NAIApU6awlr17924Eg7L11Iknnoju7m7U1dUBAN577z1ceOGFA3djA0gqJZsl6NZGY2MjNm3axOO5ePFiPPfccwCAkSNHorxcehPGjh2Ln//85/zgBwIBPPmkbKb9wQcfYPfu3QCA5557DlOnTsX06X31TTQYeue2225jAeL3+9nlnUjIJiBKUXK73ejq6rIoTupYIkIsFuPzFBcXs2J13XXXYdmyZVm/D5MgYDAYDIaskxOWDRGxZq185gBQVFSE008/nbXxrVu3YseOHQCkOTlx4sTBueAc4KOPPgIAVFRUwOVy4eDBgwCAWCwGl0u24Wpvb2eXmtfrhcvlYm2mu7ubrZ7Ro0eze81ut6O8vBzFxXLrlXy2bHSL5o477gAgx++ss85iv/iIESM4nlNVVYUJEyYAkHN2+vTpHENcvnw5qqpkb9SOjg5O2Jg/fz4CgQBmz5Z7yz377LM8tgbDkVi/fj2cTidb0NFolBOmMl2+drud3WaAnKN6chVwyJo/ePAge4bC4TA2bdqEyZMnZ/VeckLYdHd3s6sMAGdJRKNRbNmyhRdC9WADMqCrstaGG5FIhAVKMplEc3MzT7yKigoWMEVFRfy+WuBUsoWadIAcVzW2zc3NiEajfH4A/LcZCL/uYLB06VJ2G95+++245557OAZ20kkncfbPhAkTWPGZN28eHn30UU4QuOWWW3DKKacAAMaPH88P/YsvvoiVK1dygPfiiy/Gm2++CQD8d8pnFi1ahFtvvTUr51ZKwJEy/YYyt99+O+rq6qAy1XSFUc+ABGQSQTwe5/Gw2WwspFKpFLq7u3nNdDqdLIiEEPjTn/6EX/7yl1m9F+NGMxgMBkPWyQnLpqCggDOjCgsLWesOBAKIRCJs2egm4sGDBzmNb7ixefNm1lDsdjvC4TDXxhQWFrIFYrfbWbPp7u5GJBLhgKHSagDpOtKtllAoxFq33W7HV199BeBQCnC+EQqFcODAAQDA448/jurqas4y27lzJ9//nDlz8MYbbwAA7rzzTlRVVbEWWVlZiR/96EcApHXY0CA7sV944YVYt24dnn/+eQDS/bt06VIAwI033jhAdzhwJBIJOBwOfPih3BbpwIED/LPdbseECRN4rrrdx9ZAPJ8tGkVjYyM6Ozs5MUr3OPj9frS1tXGpg3qtnnGfz8frRFlZGSorK6F3jFGuXp/PhxUrVmTdsskJYVNaWso3PmbMGEvNg9/v58weffEMh8M47rjjej5hnrNr1y5OVfZ6vQgGg5YsE0UymWQh7vV6YbfbOctK9wOrdEj1/WAwyMKooqKCz5GvqLEE5NhOnz6dhUVrayvee+89AMCVV16J//mf/wEALFy4ENOnT+fxvP/++3kRTSaT+OMfZcf8jz/+GABw3nlyx+Pjjz8e27dvH4C7GliUguhwOJBKpTiDj4jw9ddfA5BKZVNTEy+cqsRBPe+Zxa9ExHPU4XCwO1MIgZqaGv5+IpHAqaeeCgC46aabsnqfA8UHH3wAQCpChYWFPA5ExOO1ceNGuN1ujBkj9zgbNWoUotEou3qLioq4ZjEQCGDt2rWcFel0Olko2Ww2+P1+LpOYNm1aVu4pJ4SN0+nEqFFy07eJEyfyYH722Wf47LPPuM5m/PjxPFFtNtuwDbQmEgkWBuPGjcOnn36KlpYWADI9V2kzpaWlHARMJpPo6OhgzUi3XoqLi1mguFwufPPNN1wwG4lELMIoH9mxYwc/eF6vF7t37+ZFb+/evfwwv/fee3jrrbcAyDlbVFSEkSPlTrgTJ07kWgj1twCAK664AjNnzsRPfvITAMD3v/99LqzNJ/Rki/nz53PCT3FxMY+lmn/qdXd3t0XTTiaTltd6ADwWi7FAKysrw969ezkO5vF4sG+f3CQyX4SNsgaj0ShKS0stRcEbN24EAJx66qnweDyWOq54PM7rYklJCY/1mWeeiaKiIi5KnjVrFguwWCyGcDiM99+XG3dmS9iYmI3BYDAYsk5OWDYjR47k7B+Px8Nau9frxaWXXopVq1YBkJlBSsLX1dXxd4Yb3d3dPA4jR46E3+/HJ598AgCYOXMmuxv0zBWFHutRViIAtoCam5tRWFhoKZhV8Yx8ZdWqVTznLrnkErz66qvwer0AZAcB5a557bXXuGAWkGOp2iwVFhayRTN79mzOwLrqqqvwxBNPsNWzfv16/PnPfx6YG8syuhWiNOj6+npMmDCBsx4dDge7yCORCOx2O89J1TdO7+Wnn1t3qSWTSf5eV1cXCgoK0NnZCUCuGcrqUWvFUEfNl8rKSvz617/GmjVyh/I5c+awR8LpdGLatGl46qmnABwq3FReisrKSvZkVFdXY9OmTZyen0wmOZPS5XLhiSeewN/93d9l9Z5yQtgUFRXxw11aWsoTJxQK4dprr2X/pcvlYh95IBBg99pwo6WlhSdcc3MzAoEAj5neLDISifC4+nw+VFZWsiDy+Xz8cHd1dXGMYuzYsQiHw7z4+nw+9gHnK4sXL8bcuXMBAD/96U/x2muvYetWubdUbW0tL5YjRozAP/3TPwEAvvrqK6xZs4Y/q6mpwQ9/+EMAwF133cVupJdffhnr16/nmqapU6dyF4KhjhI2NpuN51x9fT0qKytZ2LhcLktjXb1PHGB1CetNJFV/OuWec7vdlgaTmQkuqppeXUe+sHDhQixcuJAFymOPPYba2loAMsywatUqfsZramrg9Xotz7UqW3j77bfR3d3NdWKNjY24+eabAQB3390fu58fGeNGMxgMBkPWyQnLxuVysTR2u92spQshUF1dben9o0xuACzRhxvBYBDHH388AKChoQHnnnsua3Tr16/njJNkMsnppV6vF93d3Ty2mZlquutSHQtIy+ZIHaDzgdNPPx2ATLhoampiN+KkSZO4W8O1117LFuXq1asRDoe5+easWbPYmtm6dSs+//xzAMCaNWuwdetW7iAwevRozlCbNWvWAN1ddtB7yyk37vjx47Fy5Uq2epLJJM8lh8MBh8NhSRDQCw/tdjtbMpnWi/o9gJyjRMQuouLiYmzYsAHAoX5hQx09Q89ms3Hiw2OPPcbPem1tLcLhMFvKKolCWdtut5vP093dDYfDgZ07dwKQWaa6RaO7KbNFzggbNSher5fdNm63m01GwBpnGIjByVWSySTHEZqbmzF58mS8++67AA53I6hMFbfbjfb2dk7PjcVilodZz9/3+Xx8nkAgYPksHxkzZgxn33366afo6OjAwoULAQDr1q3jbLTx48fjpZdeAiAFRVlZGdauXQtAxrVUrZLP58PTTz8NQLoyfT4fL7CLFy9ml9pQFzZ6zKaxsREAcP755yMej1sq1/XOw7qrzOFw8J5VgHSd6Z+p9wApfJRwU0JJCR8Vq1C/Lx9Q9525k7IuTJPJJHw+H7vGlSBXx/j9fnZndnR0WLLTMhmItdS40QwGg8GQdXLCsikrK2Ntz+v1sqvM5XJZMir0LCxdQxpuJJNJi1Xi9/u5MFGvpQEOaXpdXV1IpVKWLDOlAdntdotLsqamhjdk6ujoYK3xwIEDR7WL51BBuRHnzJnDtQW33XYbKioqOGvH7XbjoosuAiDvX2VAnXvuuVi2bBm7JbZt28abUW3fvp0bo15//fVYs2YNW+jjxo3Df/3XfwEA7rnnHnaHDkV6e/507dtms1leJxIJS01OKpWyFIQqlPtIP4+u7evFjZFIhF1H+ebtyBxjvU4JkOOpj4vq4ADITEq1Y6z6Gyi3uvKMKI5mN9ljJSeEjdPpZPeY1+vln1Vxkr47p1os3W43Z6YNN5Q7ApBFX7oA6erqYkEUjUYtaaaRSIQ/0xvx6Q1NQ6EQRo0aZXGjKUEUCoXySths27YNACydFZ599llcc801XMj6wx/+kAXC9u3bOT20qKgITqcTZ511FgDZ9VmNdXNzM4/ZnXfeiZtuugmbN28GIBsrqky35cuXs7tuqKOe1Xg8joqKCo7TOJ1OiyIphDisgaZaHBOJBAuevhY+IQR3KlDfVy7MY22Bk2v0JQT02DZwSKDocRo1r0844QSkUilL802dgVDcc0LYFBUVWbQUNVGVkNErZNVkyhff7LdBbxujrBePxwO/38+TSK890oOFgDVFNRAI8OKoH5PZO01PMsgM2A51VGxQCQLFFVdcwb5uj8fDdUZExHOyuLgYnZ2dbBHp1uXq1au5c3k8HscVV1zBPdWEEJg6dSqAQx24hyq65aHa8bzyyisIBAK8eOkLnEoI0Bc2PfaiCyLVmkoXTHqqtdPp5HkrhOC5rFtH+Yge48okc00kIovQ1+M7mcJlICwbE7MxGAwGQ9bJCTXAbrezCZhKpViTzsyC0mMVyjQfTqjUWl170103me/ZbDbLGOrf6+zs7PE8iUQCfr/f4o5Q2lG+MXr0aAByzqlU5VNOOQWXXXYZXn/9dQBAU1MTu738fr+lO3ZBQQHGjRsHQFZoq838PvnkE9YyX3zxRdx6663cfDMWi6GiogJA9npQDRTKIkkmk9yZfdKkSZg3bx7HqJLJpGXPlcyYg24dxeNxdunqmWk94fF4LGn96ud8i9lk0tP9ZbrT9P1s1HuxWGzQxyYnhI3NZuP6BX0bAT19Ur1WyQP55pv9Ntjtdh4T5WJUbcbHjh17VO6u3twN0WjU0uC0o6ODF0e9vU0+oNrLfPzxx5zCHI1G4Xa7ufL6tddeszTpPOGEEwAAK1asQHFxMS6//HIA0iWmdpGdPn06B2CDwSBGjRqFvXv3ApCuUBX3URtiDXX0RWzGjBm49NJLue4mkUjwvAkEAujq6jpMiKjvJ5NJS+1Ob67yWCyGrq4uFkwulwv79+8/7Frykcwx6gm9a76eHq673wYjDGHcaAaDwWDIOjlh2eh7q3g8HtYkM7NV/H4/S+rhuiU0YC1uVRaeCpZmpjQqetOCMkkmk3C5XLxXkNo4DMi/MVfzymazce8pVZyo7nX79u18XElJCVsvW7duRSgU4myf8vJytl4mTZrEXRzUFtDKIn/rrbfwm9/8BgDytref3oPvvPPO4/TwhoYGlJeXWxJT3G43W+J6GnRP2VJqPVCuYb0MQt/nKp8RQhxm/endGvqy7FKpFH8+GM9yTggb4NAEamlp4Q1/1F4heqdnlVKqJvNwQq8lUGOihI1eM6N3WcicVD1llkUiEUubkMbGRksGoCLfYjdqztXU1GDdunUAwG4yVSeTTCa5tmbq1Kn461//CkAKpVmzZvGD3t7ezgvdyJEjeZ7W1dXx8YDMvFQCfKjva6M30FQEg0E4HA6eP59//jl3yh41ahQ2bNjAY1ZQUGDZw0ZvXaMWVf3c+s96liRwyCWpuj3kK3rWGBEhlUrxa7vdbhlP9TlwSDCpYwfDJW7caAaDwWDIOjlj2ahsqmXLlrEmqfdFAoANGzawNqPqGIYTehWwHlQFwFlSyWTS4mpU45pIJFBeXs4aZzwetyRjKDo7O9HW1tZjAkG+udFURmNpaSm7w1SRpqqBaW1tZZeix+Ph7+zcuRNFRUU8N7du3cpFohMmTMDzzz8PQLrRFi1axPM1GAyydTRnzpwhPY91S0MF6KurqzFv3jyu92ptbcWSJUsAyOy78ePHo76+HoAci0AgwHNSt2xUJpWuxSt6qglRcz7f+vj1VFOTaeFlus4yx6onBqNhac4IG+UiCofDPBDqf7UoBoNBHljVhmE4oRdfKjNYjYdyI6gUVODwzdM8Hk+PAiaVSvFDGgwG4ff7+XxffvmlpcAzn9C7CKvOuWqPj/Xr1wOQzTdVSnNNTQ0/vMXFxdi5cyd2794NAHj33Xc5BhMMBrFs2TIAhzalO+WUUwAAr7/+Osd2hnqHYuUafOedd1gR2bFjB+69917emKugoICFdWNjI4LBIHehSCQS2L9/v8Xtowub3lKf9S7RgHRbKjdovmVMZo6B3vVeCd3MVHI99Tkz60yN9WAI5ZwRNgrdr5jZWkG1yQasgz5cUNX/LpeL719phWpRKygo4PoRPT3UZrOhoKCAYwn6tg42m83S8sblcnH6s/5+vgkbJRz279+PG264AQA4vqDiL2eddRZOPvlkALIuR+0EeeaZZ2LHjh28b3tTUxN3cX7qqad4zqrFb9KkSQCkIFLW5qZNm7jyfqjR1dWFpUuXAgAuuugiSxr3/PnzeTO+9vZ2tt527tyJLVu2sGA/9dRTsXDhQp6TkUjE0uerN61cfaaETTwe53HWu8TnI7rwSKVS3Dlb0du2DJn0FJPNNiZmYzAYDIaskzOWjdKgg8EgS2OlrSiTT89AGQzJPNgojdjlcrELRmmJSnOePn06pkyZcth3Gxoa2J3RFzNmzEAymeTf1d3dzdrSUHf7ZKLiXFVVVTyOSltWXZ9ra2t5bF0uF8/FyZMno66uDl9//TUAGX/Zt28fANlrTY2Zcn2qbgFCCM5QU0WlQxGfz4cFCxb0+Nmll176nc45XDdDPBpUHLu2ttYyt3TLhYj6TH3Wn9/B6JifM8JG98Mq81m9p4K3evVsvjfc6wubzcZpyMrdpdwYqmmk+llNvs2bN8Pn81kEt34O9f6SJUswY8YMFkz5vEmdqpkpLCzkVkB6Gikg4wFKwfnwww+57cwFF1wAIQS3qykuLsaTTz4JQLqO1OKgBL8az4KCAv4dX3/9Na666qrs3qQhr9BrkVRD0p6OAazJAZkdBEzqs8FgMBjykpwxD5QbTQ9cZ7pvnE4nS3I9M2u4oFxbkUiEtRc1RqeffjoAYMGCBaxt626z4uJi2O32XjsMPPTQQwBkL7B169ZxplFTUxO3zs+3bR1Ug82TTjqJ39uzZw9GjRrF82z58uV8/7t37+Zgd3l5OcLhMGbMmAFAWkmqUt7j8fDP6m+mCpS9Xi9nak2ePDmr92fIH/QMM/XMq8xSfT8bveBbTxZQWzmotXRYZ6Nt3LgRgLXdhFrc1EZWetcA5fceTih3Tjgc5omkmmSqybNw4ULcd999AGQarxLc9fX1CIVCfI59+/Zxp4ampiY+TqWQqiy22tpa/k6+dRBQLsctW7bwPd54440A5CZqAPDggw/iiy++ACDHQrkrV65ciQMHDnDW1Z49e9ilef7552Pu3LkAgJ/+9KeW3+l0OlnI6B2kDYaeUIJE/R+NRvnZFELA6XSycFG7m+pxHCVcYrEY7+QJDM5eSsaNZjAYDIaskzOWzaJFiwDI4jilZc6fPx8A8MQTTwAA/vCHP7BGf+WVVw7CVQ4uqpB1z5497NpR/ytmzJiBZ555BoDMQFPuxoqKCuzYscNSDKr6SF100UWH7a2itHS915qyovKFu+66y/K/jnJRPPLII71+/7e//e23/p1btmz51t8xDF+U+0wlSVVVVXGNnd/vR2NjoyWkoFsv3d3dlmM9Hg8XfSu37kBCvRVOfecTErUA2NWvJ+0/xgghygf7Io4WM5b9ixnP/sOMZf8yHMaz34WNwWAwGAyZmJiNwWAwGLKOETYGg8FgyDpG2BgMBoMh6xhhYzAYDIasY4SNwWAwGLKOETYGg8FgyDpG2BgMBoMh6xhhYzAYDIasY4SNwWAwGLLO/wcIn6M1YgnfXwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 20 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from math import ceil, floor\n",
    "\n",
    "test_count = 20 # 5의 배수로 해주세요\n",
    "row = floor(test_count/col)\n",
    "col = 5\n",
    "\n",
    "# 검증용으로 사용할 이미지 꺼내어 놓기\n",
    "test_x = fashion_mnist.test._images[:test_count]\n",
    "test_y = fashion_mnist.test._labels[:test_count]\n",
    "\n",
    "with tf.Session() as sess: \n",
    "    # 세션 초기화\n",
    "    saver = tf.train.Saver(tf.global_variables())\n",
    "    saver.restore(sess, \"./model/fashion_mnist.chkp-{}\".format(best_epoch))\n",
    "\n",
    "    test_pred, test_err_val, test_cc_val = sess.run([prediction, error, accuracy], \n",
    "                                                     feed_dict={\n",
    "                                                         X: test_x, \n",
    "                                                         Y: test_y, \n",
    "                                                         is_training: False,\n",
    "                                                         keep_prob: 1.0})\n",
    "    \n",
    "    fig = plt.figure()\n",
    "    for i in range(test_count):\n",
    "        sbp = fig.add_subplot(row, col, i + 1)\n",
    "        sbp.set_xticks([])\n",
    "        sbp.set_yticks([])\n",
    "        sbp.set_title(label_dict[np.argmax(test_pred[i])])\n",
    "        sbp.imshow(fashion_mnist.test.images[i].reshape((28, 28)),\n",
    "                   cmap=plt.cm.gray_r)\n",
    "    fig.tight_layout()\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
